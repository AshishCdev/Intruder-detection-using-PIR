
Humen_intruder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000f84  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001dc  00800060  00000f84  00001018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  0080023c  0080023c  000011f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000011f4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000228  00000000  00000000  00001224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000024b5  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aed  00000000  00000000  00003901  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f43  00000000  00000000  000043ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000070c  00000000  00000000  00005334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005dc  00000000  00000000  00005a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001bff  00000000  00000000  0000601c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000220  00000000  00000000  00007c1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 a5 03 	jmp	0x74a	; 0x74a <__vector_8>
  24:	0c 94 66 03 	jmp	0x6cc	; 0x6cc <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 e0 03 	jmp	0x7c0	; 0x7c0 <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 e8       	ldi	r30, 0x84	; 132
  68:	ff e0       	ldi	r31, 0x0F	; 15
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 33       	cpi	r26, 0x3C	; 60
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	22 e0       	ldi	r18, 0x02	; 2
  78:	ac e3       	ldi	r26, 0x3C	; 60
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a2 34       	cpi	r26, 0x42	; 66
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 58 03 	call	0x6b0	; 0x6b0 <main>
  8a:	0c 94 c0 07 	jmp	0xf80	; 0xf80 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WDT_on>:
#include <avr/eeprom.h>
#include "lcd.h"


void WDT_on (void){
	WDTCR |= 0b00001111; //setting watch dog timer for 2.2 sec
  92:	81 b5       	in	r24, 0x21	; 33
  94:	8f 60       	ori	r24, 0x0F	; 15
  96:	81 bd       	out	0x21, r24	; 33
  98:	08 95       	ret

0000009a <WDT_off>:
}

void WDT_off(void)
{
	/* Write logical one to WDTOE and WDE */
	WDTCR |= (1<<WDTOE) | (1<<WDE);
  9a:	81 b5       	in	r24, 0x21	; 33
  9c:	88 61       	ori	r24, 0x18	; 24
  9e:	81 bd       	out	0x21, r24	; 33
	/* Turn off WDT */
	WDTCR = 0x00;
  a0:	11 bc       	out	0x21, r1	; 33
  a2:	08 95       	ret

000000a4 <gsm_res_btwn_c>:
		lcd_clrscr();
		lcd_puts("Insert SIM card \nand restart");while(1);
	}
	else {p=gsm_res_btwn_c(34,34,p,15);lcd_clrscr();lcd_puts(p);_delay_ms(700);free(p);}
}
char *gsm_res_btwn_c(char start,char terminate,char *target,char size){
  a4:	9f 92       	push	r9
  a6:	af 92       	push	r10
  a8:	bf 92       	push	r11
  aa:	cf 92       	push	r12
  ac:	df 92       	push	r13
  ae:	ef 92       	push	r14
  b0:	ff 92       	push	r15
  b2:	0f 93       	push	r16
  b4:	1f 93       	push	r17
  b6:	cf 93       	push	r28
  b8:	df 93       	push	r29
  ba:	c8 2f       	mov	r28, r24
  bc:	96 2e       	mov	r9, r22
  be:	c2 2e       	mov	r12, r18
	char dump;
	do{
		dump=serial_read_byte();
  c0:	0e 94 46 06 	call	0xc8c	; 0xc8c <serial_read_byte>
	} while(dump!=start);
  c4:	8c 13       	cpse	r24, r28
  c6:	fc cf       	rjmp	.-8      	; 0xc0 <gsm_res_btwn_c+0x1c>
	target=(char*)malloc(size*sizeof(char));
  c8:	8c 2d       	mov	r24, r12
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 5f 06 	call	0xcbe	; 0xcbe <malloc>
  d0:	7c 01       	movw	r14, r24
	if (target==0) return 0;
  d2:	00 97       	sbiw	r24, 0x00	; 0
  d4:	71 f1       	breq	.+92     	; 0x132 <gsm_res_btwn_c+0x8e>
	else{
		int i=0;
		for(;(i<size&&(target[i-1]!=terminate));i++) target[i]=serial_read_byte();
  d6:	d1 2c       	mov	r13, r1
  d8:	1c 14       	cp	r1, r12
  da:	1d 04       	cpc	r1, r13
  dc:	e4 f4       	brge	.+56     	; 0x116 <gsm_res_btwn_c+0x72>
  de:	fc 01       	movw	r30, r24
  e0:	31 97       	sbiw	r30, 0x01	; 1
  e2:	80 81       	ld	r24, Z
  e4:	89 15       	cp	r24, r9
  e6:	d1 f0       	breq	.+52     	; 0x11c <gsm_res_btwn_c+0x78>
  e8:	87 01       	movw	r16, r14
  ea:	40 e0       	ldi	r20, 0x00	; 0
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	c0 e0       	ldi	r28, 0x00	; 0
  f0:	d0 e0       	ldi	r29, 0x00	; 0
  f2:	57 01       	movw	r10, r14
  f4:	a4 0e       	add	r10, r20
  f6:	b5 1e       	adc	r11, r21
  f8:	0e 94 46 06 	call	0xc8c	; 0xc8c <serial_read_byte>
  fc:	f5 01       	movw	r30, r10
  fe:	80 83       	st	Z, r24
 100:	21 96       	adiw	r28, 0x01	; 1
 102:	cc 15       	cp	r28, r12
 104:	dd 05       	cpc	r29, r13
 106:	64 f4       	brge	.+24     	; 0x120 <gsm_res_btwn_c+0x7c>
 108:	ae 01       	movw	r20, r28
 10a:	f8 01       	movw	r30, r16
 10c:	81 91       	ld	r24, Z+
 10e:	8f 01       	movw	r16, r30
 110:	89 11       	cpse	r24, r9
 112:	ef cf       	rjmp	.-34     	; 0xf2 <gsm_res_btwn_c+0x4e>
 114:	05 c0       	rjmp	.+10     	; 0x120 <gsm_res_btwn_c+0x7c>
 116:	c0 e0       	ldi	r28, 0x00	; 0
 118:	d0 e0       	ldi	r29, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <gsm_res_btwn_c+0x7c>
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	d0 e0       	ldi	r29, 0x00	; 0
		target[i-1]=0;
 120:	ce 0d       	add	r28, r14
 122:	df 1d       	adc	r29, r15
 124:	21 97       	sbiw	r28, 0x01	; 1
 126:	18 82       	st	Y, r1
		serial_Erase_all();
 128:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_Erase_all>
		return target;
 12c:	8e 2d       	mov	r24, r14
 12e:	9f 2d       	mov	r25, r15
 130:	02 c0       	rjmp	.+4      	; 0x136 <gsm_res_btwn_c+0x92>
	char dump;
	do{
		dump=serial_read_byte();
	} while(dump!=start);
	target=(char*)malloc(size*sizeof(char));
	if (target==0) return 0;
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	90 e0       	ldi	r25, 0x00	; 0
		for(;(i<size&&(target[i-1]!=terminate));i++) target[i]=serial_read_byte();
		target[i-1]=0;
		serial_Erase_all();
		return target;
	}
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	1f 91       	pop	r17
 13c:	0f 91       	pop	r16
 13e:	ff 90       	pop	r15
 140:	ef 90       	pop	r14
 142:	df 90       	pop	r13
 144:	cf 90       	pop	r12
 146:	bf 90       	pop	r11
 148:	af 90       	pop	r10
 14a:	9f 90       	pop	r9
 14c:	08 95       	ret

0000014e <gsm_echo_dis>:
		_delay_ms(1000);
		goto here;
	}
	
}
void gsm_echo_dis(void){
 14e:	cf 93       	push	r28
 150:	df 93       	push	r29
	char *o;
	serial_send("ATE0");
 152:	86 eb       	ldi	r24, 0xB6	; 182
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	0e 94 26 06 	call	0xc4c	; 0xc4c <serial_send>
	o=gsm_res_btwn_c('\n','\r',o,10);
 15a:	2a e0       	ldi	r18, 0x0A	; 10
 15c:	40 e0       	ldi	r20, 0x00	; 0
 15e:	50 e0       	ldi	r21, 0x00	; 0
 160:	6d e0       	ldi	r22, 0x0D	; 13
 162:	8a e0       	ldi	r24, 0x0A	; 10
 164:	0e 94 52 00 	call	0xa4	; 0xa4 <gsm_res_btwn_c>
 168:	ec 01       	movw	r28, r24
	WDT_on();
 16a:	0e 94 49 00 	call	0x92	; 0x92 <WDT_on>
	if(!strcmp(o,"OK")){WDT_off();lcd_puts("Echo disabled");_delay_ms(700);free(o);}
 16e:	6b eb       	ldi	r22, 0xBB	; 187
 170:	70 e0       	ldi	r23, 0x00	; 0
 172:	ce 01       	movw	r24, r28
 174:	0e 94 86 07 	call	0xf0c	; 0xf0c <strcmp>
 178:	89 2b       	or	r24, r25
 17a:	99 f4       	brne	.+38     	; 0x1a2 <gsm_echo_dis+0x54>
 17c:	0e 94 4d 00 	call	0x9a	; 0x9a <WDT_off>
 180:	8e eb       	ldi	r24, 0xBE	; 190
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 188:	2f ef       	ldi	r18, 0xFF	; 255
 18a:	8f e9       	ldi	r24, 0x9F	; 159
 18c:	97 e1       	ldi	r25, 0x17	; 23
 18e:	21 50       	subi	r18, 0x01	; 1
 190:	80 40       	sbci	r24, 0x00	; 0
 192:	90 40       	sbci	r25, 0x00	; 0
 194:	e1 f7       	brne	.-8      	; 0x18e <gsm_echo_dis+0x40>
 196:	00 c0       	rjmp	.+0      	; 0x198 <gsm_echo_dis+0x4a>
 198:	00 00       	nop
 19a:	ce 01       	movw	r24, r28
 19c:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
 1a0:	01 c0       	rjmp	.+2      	; 0x1a4 <gsm_echo_dis+0x56>
 1a2:	ff cf       	rjmp	.-2      	; 0x1a2 <gsm_echo_dis+0x54>
	else while (1);
}
 1a4:	df 91       	pop	r29
 1a6:	cf 91       	pop	r28
 1a8:	08 95       	ret

000001aa <gsm_ini>:
	WDTCR |= (1<<WDTOE) | (1<<WDE);
	/* Turn off WDT */
	WDTCR = 0x00;
}

void gsm_ini(void){
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
		serial_send("AT");
 1ae:	8c ec       	ldi	r24, 0xCC	; 204
 1b0:	90 e0       	ldi	r25, 0x00	; 0
 1b2:	0e 94 26 06 	call	0xc4c	; 0xc4c <serial_send>
		char *f;WDT_on();
 1b6:	0e 94 49 00 	call	0x92	; 0x92 <WDT_on>
		f=gsm_res_btwn_c('\n','\r',f,10);
 1ba:	2a e0       	ldi	r18, 0x0A	; 10
 1bc:	40 e0       	ldi	r20, 0x00	; 0
 1be:	50 e0       	ldi	r21, 0x00	; 0
 1c0:	6d e0       	ldi	r22, 0x0D	; 13
 1c2:	8a e0       	ldi	r24, 0x0A	; 10
 1c4:	0e 94 52 00 	call	0xa4	; 0xa4 <gsm_res_btwn_c>
 1c8:	ec 01       	movw	r28, r24
		if (!strcmp(f,"OK")){
 1ca:	6b eb       	ldi	r22, 0xBB	; 187
 1cc:	70 e0       	ldi	r23, 0x00	; 0
 1ce:	0e 94 86 07 	call	0xf0c	; 0xf0c <strcmp>
 1d2:	89 2b       	or	r24, r25
 1d4:	c9 f4       	brne	.+50     	; 0x208 <gsm_ini+0x5e>
			WDT_off();
 1d6:	0e 94 4d 00 	call	0x9a	; 0x9a <WDT_off>
			lcd_clrscr();free(f);lcd_puts("DONE");
 1da:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
 1de:	ce 01       	movw	r24, r28
 1e0:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
 1e4:	8f ec       	ldi	r24, 0xCF	; 207
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
 1ec:	2f ef       	ldi	r18, 0xFF	; 255
 1ee:	8f ed       	ldi	r24, 0xDF	; 223
 1f0:	90 e1       	ldi	r25, 0x10	; 16
 1f2:	21 50       	subi	r18, 0x01	; 1
 1f4:	80 40       	sbci	r24, 0x00	; 0
 1f6:	90 40       	sbci	r25, 0x00	; 0
 1f8:	e1 f7       	brne	.-8      	; 0x1f2 <gsm_ini+0x48>
 1fa:	00 c0       	rjmp	.+0      	; 0x1fc <gsm_ini+0x52>
 1fc:	00 00       	nop
			_delay_ms(500);
			lcd_clrscr();
 1fe:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
			gsm_echo_dis();
 202:	0e 94 a7 00 	call	0x14e	; 0x14e <gsm_echo_dis>
 206:	01 c0       	rjmp	.+2      	; 0x20a <gsm_ini+0x60>
 208:	ff cf       	rjmp	.-2      	; 0x208 <gsm_ini+0x5e>
			}
		else while(1);
}
 20a:	df 91       	pop	r29
 20c:	cf 91       	pop	r28
 20e:	08 95       	ret

00000210 <gsm_res_btwn_n>:
		target[i-1]=0;
		serial_Erase_all();
		return target;
	}
}
char *gsm_res_btwn_n(char after,char till,char *target,char size){
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	0f 93       	push	r16
 216:	1f 93       	push	r17
 218:	cf 93       	push	r28
 21a:	df 93       	push	r29
 21c:	c8 2f       	mov	r28, r24
 21e:	e6 2e       	mov	r14, r22
 220:	d2 2f       	mov	r29, r18
	char dump;
	for (;after;--after)
 222:	88 23       	and	r24, r24
 224:	21 f0       	breq	.+8      	; 0x22e <gsm_res_btwn_n+0x1e>
	{
		dump=serial_read_byte();
 226:	0e 94 46 06 	call	0xc8c	; 0xc8c <serial_read_byte>
		return target;
	}
}
char *gsm_res_btwn_n(char after,char till,char *target,char size){
	char dump;
	for (;after;--after)
 22a:	c1 50       	subi	r28, 0x01	; 1
 22c:	e1 f7       	brne	.-8      	; 0x226 <gsm_res_btwn_n+0x16>
	{
		dump=serial_read_byte();
	}
	target=(char*)malloc(size*sizeof(char));
 22e:	8d 2f       	mov	r24, r29
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	0e 94 5f 06 	call	0xcbe	; 0xcbe <malloc>
 236:	8c 01       	movw	r16, r24
	if (target==0) return 0;
 238:	00 97       	sbiw	r24, 0x00	; 0
 23a:	99 f0       	breq	.+38     	; 0x262 <gsm_res_btwn_n+0x52>
	char i;
	for(i=0;i<till;i++){
 23c:	ee 20       	and	r14, r14
 23e:	41 f0       	breq	.+16     	; 0x250 <gsm_res_btwn_n+0x40>
 240:	ec 01       	movw	r28, r24
 242:	f1 2c       	mov	r15, r1
		target[i]=serial_read_byte();
 244:	0e 94 46 06 	call	0xc8c	; 0xc8c <serial_read_byte>
 248:	89 93       	st	Y+, r24
		dump=serial_read_byte();
	}
	target=(char*)malloc(size*sizeof(char));
	if (target==0) return 0;
	char i;
	for(i=0;i<till;i++){
 24a:	f3 94       	inc	r15
 24c:	fe 10       	cpse	r15, r14
 24e:	fa cf       	rjmp	.-12     	; 0x244 <gsm_res_btwn_n+0x34>
		target[i]=serial_read_byte();
	}
	target[i]=0;
 250:	f8 01       	movw	r30, r16
 252:	ee 0d       	add	r30, r14
 254:	f1 1d       	adc	r31, r1
 256:	10 82       	st	Z, r1
	serial_Erase_all();
 258:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_Erase_all>
	return target;
 25c:	80 2f       	mov	r24, r16
 25e:	91 2f       	mov	r25, r17
 260:	02 c0       	rjmp	.+4      	; 0x266 <gsm_res_btwn_n+0x56>
	for (;after;--after)
	{
		dump=serial_read_byte();
	}
	target=(char*)malloc(size*sizeof(char));
	if (target==0) return 0;
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
		target[i]=serial_read_byte();
	}
	target[i]=0;
	serial_Erase_all();
	return target;
}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	1f 91       	pop	r17
 26c:	0f 91       	pop	r16
 26e:	ff 90       	pop	r15
 270:	ef 90       	pop	r14
 272:	08 95       	ret

00000274 <gsm_reg>:
			lcd_clrscr();
			gsm_echo_dis();
			}
		else while(1);
}
void gsm_reg(void){
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
	char *k;
	anim_on();
 278:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <anim_on>
	lcd_clrscr();
 27c:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
	lcd_puts("Registering to\nthe network");
 280:	84 ed       	ldi	r24, 0xD4	; 212
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
	here:serial_send("AT+CREG?");
 288:	8f ee       	ldi	r24, 0xEF	; 239
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	0e 94 26 06 	call	0xc4c	; 0xc4c <serial_send>
	k=gsm_res_btwn_n(9,3,k,10);
 290:	2a e0       	ldi	r18, 0x0A	; 10
 292:	ae 01       	movw	r20, r28
 294:	63 e0       	ldi	r22, 0x03	; 3
 296:	89 e0       	ldi	r24, 0x09	; 9
 298:	0e 94 08 01 	call	0x210	; 0x210 <gsm_res_btwn_n>
 29c:	ec 01       	movw	r28, r24
	if (!strcmp(k,"0,1")){
 29e:	68 ef       	ldi	r22, 0xF8	; 248
 2a0:	70 e0       	ldi	r23, 0x00	; 0
 2a2:	0e 94 86 07 	call	0xf0c	; 0xf0c <strcmp>
 2a6:	89 2b       	or	r24, r25
 2a8:	a9 f4       	brne	.+42     	; 0x2d4 <gsm_reg+0x60>
		lcd_clrscr();
 2aa:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
		lcd_puts("Registered");
 2ae:	8c ef       	ldi	r24, 0xFC	; 252
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
		anim_done();
 2b6:	0e 94 74 02 	call	0x4e8	; 0x4e8 <anim_done>
		free(k);
 2ba:	ce 01       	movw	r24, r28
 2bc:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
 2c0:	2f ef       	ldi	r18, 0xFF	; 255
 2c2:	8f ed       	ldi	r24, 0xDF	; 223
 2c4:	90 e1       	ldi	r25, 0x10	; 16
 2c6:	21 50       	subi	r18, 0x01	; 1
 2c8:	80 40       	sbci	r24, 0x00	; 0
 2ca:	90 40       	sbci	r25, 0x00	; 0
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <gsm_reg+0x52>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <gsm_reg+0x5c>
 2d0:	00 00       	nop
 2d2:	0a c0       	rjmp	.+20     	; 0x2e8 <gsm_reg+0x74>
 2d4:	2f ef       	ldi	r18, 0xFF	; 255
 2d6:	8f eb       	ldi	r24, 0xBF	; 191
 2d8:	91 e2       	ldi	r25, 0x21	; 33
 2da:	21 50       	subi	r18, 0x01	; 1
 2dc:	80 40       	sbci	r24, 0x00	; 0
 2de:	90 40       	sbci	r25, 0x00	; 0
 2e0:	e1 f7       	brne	.-8      	; 0x2da <gsm_reg+0x66>
 2e2:	00 c0       	rjmp	.+0      	; 0x2e4 <gsm_reg+0x70>
 2e4:	00 00       	nop
 2e6:	d0 cf       	rjmp	.-96     	; 0x288 <gsm_reg+0x14>
	else {
		_delay_ms(1000);
		goto here;
	}
	
}
 2e8:	df 91       	pop	r29
 2ea:	cf 91       	pop	r28
 2ec:	08 95       	ret

000002ee <gsm_sim_status>:
	o=gsm_res_btwn_c('\n','\r',o,10);
	WDT_on();
	if(!strcmp(o,"OK")){WDT_off();lcd_puts("Echo disabled");_delay_ms(700);free(o);}
	else while (1);
}
void gsm_sim_status(void){
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
	char *p;
	serial_send("AT+CSPN?");
 2f2:	87 e0       	ldi	r24, 0x07	; 7
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 26 06 	call	0xc4c	; 0xc4c <serial_send>
	p=gsm_res_btwn_n(2,5,p,10);
 2fa:	2a e0       	ldi	r18, 0x0A	; 10
 2fc:	40 e0       	ldi	r20, 0x00	; 0
 2fe:	50 e0       	ldi	r21, 0x00	; 0
 300:	65 e0       	ldi	r22, 0x05	; 5
 302:	82 e0       	ldi	r24, 0x02	; 2
 304:	0e 94 08 01 	call	0x210	; 0x210 <gsm_res_btwn_n>
 308:	ec 01       	movw	r28, r24
	if (!strcmp(p,"ERROR")){
 30a:	60 e1       	ldi	r22, 0x10	; 16
 30c:	71 e0       	ldi	r23, 0x01	; 1
 30e:	0e 94 86 07 	call	0xf0c	; 0xf0c <strcmp>
 312:	89 2b       	or	r24, r25
 314:	39 f4       	brne	.+14     	; 0x324 <gsm_sim_status+0x36>
		lcd_clrscr();
 316:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
		lcd_puts("Insert SIM card \nand restart");while(1);
 31a:	86 e1       	ldi	r24, 0x16	; 22
 31c:	91 e0       	ldi	r25, 0x01	; 1
 31e:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
 322:	ff cf       	rjmp	.-2      	; 0x322 <gsm_sim_status+0x34>
	}
	else {p=gsm_res_btwn_c(34,34,p,15);lcd_clrscr();lcd_puts(p);_delay_ms(700);free(p);}
 324:	2f e0       	ldi	r18, 0x0F	; 15
 326:	ae 01       	movw	r20, r28
 328:	62 e2       	ldi	r22, 0x22	; 34
 32a:	82 e2       	ldi	r24, 0x22	; 34
 32c:	0e 94 52 00 	call	0xa4	; 0xa4 <gsm_res_btwn_c>
 330:	ec 01       	movw	r28, r24
 332:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
 336:	ce 01       	movw	r24, r28
 338:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
 33c:	2f ef       	ldi	r18, 0xFF	; 255
 33e:	8f e9       	ldi	r24, 0x9F	; 159
 340:	97 e1       	ldi	r25, 0x17	; 23
 342:	21 50       	subi	r18, 0x01	; 1
 344:	80 40       	sbci	r24, 0x00	; 0
 346:	90 40       	sbci	r25, 0x00	; 0
 348:	e1 f7       	brne	.-8      	; 0x342 <gsm_sim_status+0x54>
 34a:	00 c0       	rjmp	.+0      	; 0x34c <gsm_sim_status+0x5e>
 34c:	00 00       	nop
 34e:	ce 01       	movw	r24, r28
 350:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
}
 354:	df 91       	pop	r29
 356:	cf 91       	pop	r28
 358:	08 95       	ret

0000035a <gsm_sig_q>:
	target[i]=0;
	serial_Erase_all();
	return target;
}

void gsm_sig_q(void){
 35a:	1f 93       	push	r17
 35c:	cf 93       	push	r28
 35e:	df 93       	push	r29
	char *h,inte=0;
	serial_send("AT+CSQ");
 360:	83 e3       	ldi	r24, 0x33	; 51
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	0e 94 26 06 	call	0xc4c	; 0xc4c <serial_send>
	h=gsm_res_btwn_n(8,2,h,20);
 368:	24 e1       	ldi	r18, 0x14	; 20
 36a:	40 e0       	ldi	r20, 0x00	; 0
 36c:	50 e0       	ldi	r21, 0x00	; 0
 36e:	62 e0       	ldi	r22, 0x02	; 2
 370:	88 e0       	ldi	r24, 0x08	; 8
 372:	0e 94 08 01 	call	0x210	; 0x210 <gsm_res_btwn_n>
 376:	ec 01       	movw	r28, r24
	inte=extract_int(h);
 378:	0e 94 9c 02 	call	0x538	; 0x538 <extract_int>
 37c:	18 2f       	mov	r17, r24
	lcd_gotoxy(15,0);
 37e:	60 e0       	ldi	r22, 0x00	; 0
 380:	8f e0       	ldi	r24, 0x0F	; 15
 382:	0e 94 7e 04 	call	0x8fc	; 0x8fc <lcd_gotoxy>
	if ((inte>=0)&&(inte<99))lcd_put_cus((inte/6)+4);
 386:	13 36       	cpi	r17, 0x63	; 99
 388:	50 f4       	brcc	.+20     	; 0x39e <gsm_sig_q+0x44>
 38a:	8b ea       	ldi	r24, 0xAB	; 171
 38c:	18 9f       	mul	r17, r24
 38e:	81 2d       	mov	r24, r1
 390:	11 24       	eor	r1, r1
 392:	86 95       	lsr	r24
 394:	86 95       	lsr	r24
 396:	8c 5f       	subi	r24, 0xFC	; 252
 398:	0e 94 4d 05 	call	0xa9a	; 0xa9a <lcd_put_cus>
 39c:	03 c0       	rjmp	.+6      	; 0x3a4 <gsm_sig_q+0x4a>
	else lcd_putc('X');
 39e:	88 e5       	ldi	r24, 0x58	; 88
 3a0:	0e 94 8c 04 	call	0x918	; 0x918 <lcd_putc>
	free(h);
 3a4:	ce 01       	movw	r24, r28
 3a6:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
}
 3aa:	df 91       	pop	r29
 3ac:	cf 91       	pop	r28
 3ae:	1f 91       	pop	r17
 3b0:	08 95       	ret

000003b2 <gsm_send_message>:
_Bool gsm_send_message(char *message){
 3b2:	ef 92       	push	r14
 3b4:	ff 92       	push	r15
 3b6:	0f 93       	push	r16
 3b8:	1f 93       	push	r17
 3ba:	cf 93       	push	r28
 3bc:	df 93       	push	r29
 3be:	cd b7       	in	r28, 0x3d	; 61
 3c0:	de b7       	in	r29, 0x3e	; 62
 3c2:	2a 97       	sbiw	r28, 0x0a	; 10
 3c4:	0f b6       	in	r0, 0x3f	; 63
 3c6:	f8 94       	cli
 3c8:	de bf       	out	0x3e, r29	; 62
 3ca:	0f be       	out	0x3f, r0	; 63
 3cc:	cd bf       	out	0x3d, r28	; 61
 3ce:	7c 01       	movw	r14, r24
	char *j,*k;
	serial_send("AT+CMGF=1");
 3d0:	8a e3       	ldi	r24, 0x3A	; 58
 3d2:	91 e0       	ldi	r25, 0x01	; 1
 3d4:	0e 94 26 06 	call	0xc4c	; 0xc4c <serial_send>
	j=gsm_res_btwn_c('\n','\r',j,10);
 3d8:	2a e0       	ldi	r18, 0x0A	; 10
 3da:	40 e0       	ldi	r20, 0x00	; 0
 3dc:	50 e0       	ldi	r21, 0x00	; 0
 3de:	6d e0       	ldi	r22, 0x0D	; 13
 3e0:	8a e0       	ldi	r24, 0x0A	; 10
 3e2:	0e 94 52 00 	call	0xa4	; 0xa4 <gsm_res_btwn_c>
 3e6:	8c 01       	movw	r16, r24
	if (!strcmp(j,"OK")){
 3e8:	6b eb       	ldi	r22, 0xBB	; 187
 3ea:	70 e0       	ldi	r23, 0x00	; 0
 3ec:	0e 94 86 07 	call	0xf0c	; 0xf0c <strcmp>
 3f0:	89 2b       	or	r24, r25
 3f2:	09 f0       	breq	.+2      	; 0x3f6 <gsm_send_message+0x44>
 3f4:	50 c0       	rjmp	.+160    	; 0x496 <__stack+0x37>
		free(j);
 3f6:	c8 01       	movw	r24, r16
 3f8:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
		serial_send_nf("AT+CMGS=");
 3fc:	84 e4       	ldi	r24, 0x44	; 68
 3fe:	91 e0       	ldi	r25, 0x01	; 1
 400:	0e 94 4a 06 	call	0xc94	; 0xc94 <serial_send_nf>
		serial_send_byte(34);
 404:	82 e2       	ldi	r24, 0x22	; 34
 406:	0e 94 3d 06 	call	0xc7a	; 0xc7a <serial_send_byte>
		serial_send_nf("+91");
 40a:	8d e4       	ldi	r24, 0x4D	; 77
 40c:	91 e0       	ldi	r25, 0x01	; 1
 40e:	0e 94 4a 06 	call	0xc94	; 0xc94 <serial_send_nf>
		uint8_t numb[10];
		eeprom_read_block (( void *) numb , ( const void *) eeprom_star, 11) ;
 412:	4b e0       	ldi	r20, 0x0B	; 11
 414:	50 e0       	ldi	r21, 0x00	; 0
 416:	64 e1       	ldi	r22, 0x14	; 20
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	ce 01       	movw	r24, r28
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	0e 94 8f 07 	call	0xf1e	; 0xf1e <__eerd_block_m16>
		serial_send_nf(numb);
 422:	ce 01       	movw	r24, r28
 424:	01 96       	adiw	r24, 0x01	; 1
 426:	0e 94 4a 06 	call	0xc94	; 0xc94 <serial_send_nf>
		serial_send_byte(34);
 42a:	82 e2       	ldi	r24, 0x22	; 34
 42c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <serial_send_byte>
		serial_send_byte('\r');
 430:	8d e0       	ldi	r24, 0x0D	; 13
 432:	0e 94 3d 06 	call	0xc7a	; 0xc7a <serial_send_byte>
 436:	2f ef       	ldi	r18, 0xFF	; 255
 438:	8f eb       	ldi	r24, 0xBF	; 191
 43a:	91 e2       	ldi	r25, 0x21	; 33
 43c:	21 50       	subi	r18, 0x01	; 1
 43e:	80 40       	sbci	r24, 0x00	; 0
 440:	90 40       	sbci	r25, 0x00	; 0
 442:	e1 f7       	brne	.-8      	; 0x43c <gsm_send_message+0x8a>
 444:	00 c0       	rjmp	.+0      	; 0x446 <gsm_send_message+0x94>
 446:	00 00       	nop
		_delay_ms(1000);
		serial_send_nf(message);
 448:	c7 01       	movw	r24, r14
 44a:	0e 94 4a 06 	call	0xc94	; 0xc94 <serial_send_nf>
		UDR=26;
 44e:	8a e1       	ldi	r24, 0x1A	; 26
 450:	8c b9       	out	0x0c, r24	; 12
		k=gsm_res_btwn_n(2,5,k,10);
 452:	2a e0       	ldi	r18, 0x0A	; 10
 454:	40 e0       	ldi	r20, 0x00	; 0
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	65 e0       	ldi	r22, 0x05	; 5
 45a:	82 e0       	ldi	r24, 0x02	; 2
 45c:	0e 94 08 01 	call	0x210	; 0x210 <gsm_res_btwn_n>
 460:	8c 01       	movw	r16, r24
		if (!strcmp(k,"ERROR")){
 462:	60 e1       	ldi	r22, 0x10	; 16
 464:	71 e0       	ldi	r23, 0x01	; 1
 466:	0e 94 86 07 	call	0xf0c	; 0xf0c <strcmp>
 46a:	89 2b       	or	r24, r25
 46c:	59 f4       	brne	.+22     	; 0x484 <__stack+0x25>
			lcd_clrscr();
 46e:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
			lcd_puts("Message sending\nfailed");
 472:	81 e5       	ldi	r24, 0x51	; 81
 474:	91 e0       	ldi	r25, 0x01	; 1
 476:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
			free(k);
 47a:	c8 01       	movw	r24, r16
 47c:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
			return 0;
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	0d c0       	rjmp	.+26     	; 0x49e <__stack+0x3f>
		}
		else {free(k); lcd_puts("massage sent\nsuccessfully"); return 1;}
 484:	c8 01       	movw	r24, r16
 486:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
 48a:	88 e6       	ldi	r24, 0x68	; 104
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	04 c0       	rjmp	.+8      	; 0x49e <__stack+0x3f>
	}
	else{free(j);return 0;}
 496:	c8 01       	movw	r24, r16
 498:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
 49c:	80 e0       	ldi	r24, 0x00	; 0
 49e:	2a 96       	adiw	r28, 0x0a	; 10
 4a0:	0f b6       	in	r0, 0x3f	; 63
 4a2:	f8 94       	cli
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	0f be       	out	0x3f, r0	; 63
 4a8:	cd bf       	out	0x3d, r28	; 61
 4aa:	df 91       	pop	r29
 4ac:	cf 91       	pop	r28
 4ae:	1f 91       	pop	r17
 4b0:	0f 91       	pop	r16
 4b2:	ff 90       	pop	r15
 4b4:	ef 90       	pop	r14
 4b6:	08 95       	ret

000004b8 <anim_on>:
#define time_out 1

char time_count=0;_Bool mode_p=0;

void anim_on(void){
TCNT0=0;		//complete 255 value overflow
 4b8:	12 be       	out	0x32, r1	; 50
TCCR0|=(1<<2)|(1<3);  //starting timer 0 for analog sampling with 1024 prescaler
 4ba:	83 b7       	in	r24, 0x33	; 51
 4bc:	85 60       	ori	r24, 0x05	; 5
 4be:	83 bf       	out	0x33, r24	; 51
TIMSK|=(1<<TOIE0);// Enabling interrupt 
 4c0:	89 b7       	in	r24, 0x39	; 57
 4c2:	81 60       	ori	r24, 0x01	; 1
 4c4:	89 bf       	out	0x39, r24	; 57
sei();
 4c6:	78 94       	sei
 4c8:	08 95       	ret

000004ca <thread_on>:
}

void thread_on(_Bool mode){
	mode_p =mode;
 4ca:	80 93 3c 02 	sts	0x023C, r24
		TCCR1A=0b00000000; 
 4ce:	1f bc       	out	0x2f, r1	; 47
	if(!mode)TCCR1B=0b00000100;
 4d0:	81 11       	cpse	r24, r1
 4d2:	03 c0       	rjmp	.+6      	; 0x4da <thread_on+0x10>
 4d4:	84 e0       	ldi	r24, 0x04	; 4
 4d6:	8e bd       	out	0x2e, r24	; 46
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <thread_on+0x14>
	else 	 TCCR1B=0b00000101;
 4da:	85 e0       	ldi	r24, 0x05	; 5
 4dc:	8e bd       	out	0x2e, r24	; 46
		TIMSK|=(1<<TOIE1);
 4de:	89 b7       	in	r24, 0x39	; 57
 4e0:	84 60       	ori	r24, 0x04	; 4
 4e2:	89 bf       	out	0x39, r24	; 57
		sei();
 4e4:	78 94       	sei
 4e6:	08 95       	ret

000004e8 <anim_done>:
}
void anim_done(void){
	TIMSK&=~(1<<TOIE0);
 4e8:	89 b7       	in	r24, 0x39	; 57
 4ea:	8e 7f       	andi	r24, 0xFE	; 254
 4ec:	89 bf       	out	0x39, r24	; 57
	lcd_gotoxy(15,1);
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	8f e0       	ldi	r24, 0x0F	; 15
 4f2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <lcd_gotoxy>
	lcd_put_cus(3);
 4f6:	83 e0       	ldi	r24, 0x03	; 3
 4f8:	0e 94 4d 05 	call	0xa9a	; 0xa9a <lcd_put_cus>
 4fc:	08 95       	ret

000004fe <setup_ini>:
}

void setup_ini(void){
	lcd_init(LCD_DISP_ON);
 4fe:	8c e0       	ldi	r24, 0x0C	; 12
 500:	0e 94 b1 04 	call	0x962	; 0x962 <lcd_init>
	lcd_bck_on();
 504:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <lcd_bck_on>
	lcd_puts("   system\ninitializing");
 508:	82 e8       	ldi	r24, 0x82	; 130
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
	anim_on();
 510:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <anim_on>
	DDRA=0b11000000;
 514:	80 ec       	ldi	r24, 0xC0	; 192
 516:	8a bb       	out	0x1a, r24	; 26
 518:	2f ef       	ldi	r18, 0xFF	; 255
 51a:	8f eb       	ldi	r24, 0xBF	; 191
 51c:	91 e2       	ldi	r25, 0x21	; 33
 51e:	21 50       	subi	r18, 0x01	; 1
 520:	80 40       	sbci	r24, 0x00	; 0
 522:	90 40       	sbci	r25, 0x00	; 0
 524:	e1 f7       	brne	.-8      	; 0x51e <setup_ini+0x20>
 526:	00 c0       	rjmp	.+0      	; 0x528 <setup_ini+0x2a>
 528:	00 00       	nop
	_delay_ms(1000);
	serial_init();
 52a:	0e 94 19 06 	call	0xc32	; 0xc32 <serial_init>
	gsm_ini();
 52e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <gsm_ini>
	anim_done();
 532:	0e 94 74 02 	call	0x4e8	; 0x4e8 <anim_done>
 536:	08 95       	ret

00000538 <extract_int>:
}

int extract_int (char *str){
 538:	9c 01       	movw	r18, r24
	int ret=0;char i=0;
 53a:	a0 e0       	ldi	r26, 0x00	; 0
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	90 e0       	ldi	r25, 0x00	; 0
	do{
		if ((str[i]>='0')&&(str[i]<='9')){
 540:	f9 01       	movw	r30, r18
 542:	ea 0f       	add	r30, r26
 544:	f1 1d       	adc	r31, r1
 546:	40 81       	ld	r20, Z
 548:	50 ed       	ldi	r21, 0xD0	; 208
 54a:	54 0f       	add	r21, r20
 54c:	5a 30       	cpi	r21, 0x0A	; 10
 54e:	80 f4       	brcc	.+32     	; 0x570 <extract_int+0x38>
			ret=((ret*10)+(str[i]-48));
 550:	bc 01       	movw	r22, r24
 552:	66 0f       	add	r22, r22
 554:	77 1f       	adc	r23, r23
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	88 0f       	add	r24, r24
 55c:	99 1f       	adc	r25, r25
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	86 0f       	add	r24, r22
 564:	97 1f       	adc	r25, r23
 566:	50 e0       	ldi	r21, 0x00	; 0
 568:	40 53       	subi	r20, 0x30	; 48
 56a:	51 09       	sbc	r21, r1
 56c:	84 0f       	add	r24, r20
 56e:	95 1f       	adc	r25, r21
		}
		i++;
 570:	af 5f       	subi	r26, 0xFF	; 255
	}while(str[i]!='\0');
 572:	f9 01       	movw	r30, r18
 574:	ea 0f       	add	r30, r26
 576:	f1 1d       	adc	r31, r1
 578:	40 81       	ld	r20, Z
 57a:	41 11       	cpse	r20, r1
 57c:	e1 cf       	rjmp	.-62     	; 0x540 <extract_int+0x8>
	return ret;
}
 57e:	08 95       	ret

00000580 <eeprom_update>:

void eeprom_update(){
 580:	0f 93       	push	r16
 582:	1f 93       	push	r17
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
	lcd_clrscr();
 588:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
	lcd_puts("Type new number\n");
 58c:	89 e9       	ldi	r24, 0x99	; 153
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
	char *key_str1,*key_str2;
		key_str1=Key_get_str(15,key_str1);
 594:	60 e0       	ldi	r22, 0x00	; 0
 596:	70 e0       	ldi	r23, 0x00	; 0
 598:	8f e0       	ldi	r24, 0x0F	; 15
 59a:	0e 94 c8 05 	call	0xb90	; 0xb90 <Key_get_str>
 59e:	ec 01       	movw	r28, r24
		lcd_clrscr();
 5a0:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
		lcd_puts("again\n");
 5a4:	8a ea       	ldi	r24, 0xAA	; 170
 5a6:	91 e0       	ldi	r25, 0x01	; 1
 5a8:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
		key_str2=Key_get_str(15,key_str2);
 5ac:	60 e0       	ldi	r22, 0x00	; 0
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	8f e0       	ldi	r24, 0x0F	; 15
 5b2:	0e 94 c8 05 	call	0xb90	; 0xb90 <Key_get_str>
 5b6:	8c 01       	movw	r16, r24
		if(!strcmp(key_str1,key_str2)){
 5b8:	bc 01       	movw	r22, r24
 5ba:	ce 01       	movw	r24, r28
 5bc:	0e 94 86 07 	call	0xf0c	; 0xf0c <strcmp>
 5c0:	89 2b       	or	r24, r25
 5c2:	c9 f4       	brne	.+50     	; 0x5f6 <eeprom_update+0x76>
			free(key_str2);
 5c4:	c8 01       	movw	r24, r16
 5c6:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
			eeprom_update_block (( const void *) key_str1, ( void *) eeprom_star, 10);
 5ca:	4a e0       	ldi	r20, 0x0A	; 10
 5cc:	50 e0       	ldi	r21, 0x00	; 0
 5ce:	64 e1       	ldi	r22, 0x14	; 20
 5d0:	70 e0       	ldi	r23, 0x00	; 0
 5d2:	ce 01       	movw	r24, r28
 5d4:	0e 94 9f 07 	call	0xf3e	; 0xf3e <__eeupd_block_m16>
			eeprom_update_byte(( uint8_t *) (eeprom_star+10),'\0');
 5d8:	60 e0       	ldi	r22, 0x00	; 0
 5da:	8e e1       	ldi	r24, 0x1E	; 30
 5dc:	90 e0       	ldi	r25, 0x00	; 0
 5de:	0e 94 af 07 	call	0xf5e	; 0xf5e <__eeupd_byte_m16>
			lcd_clrscr();lcd_puts("number changed \nsuccessfully");
 5e2:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
 5e6:	81 eb       	ldi	r24, 0xB1	; 177
 5e8:	91 e0       	ldi	r25, 0x01	; 1
 5ea:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
			free(key_str1);
 5ee:	ce 01       	movw	r24, r28
 5f0:	0e 94 f7 06 	call	0xdee	; 0xdee <free>
 5f4:	0f c0       	rjmp	.+30     	; 0x614 <eeprom_update+0x94>
		}
		else {lcd_clrscr();lcd_puts("numbers not same\nchange not saved");_delay_ms(1000);}
 5f6:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
 5fa:	8e ec       	ldi	r24, 0xCE	; 206
 5fc:	91 e0       	ldi	r25, 0x01	; 1
 5fe:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
 602:	2f ef       	ldi	r18, 0xFF	; 255
 604:	8f eb       	ldi	r24, 0xBF	; 191
 606:	91 e2       	ldi	r25, 0x21	; 33
 608:	21 50       	subi	r18, 0x01	; 1
 60a:	80 40       	sbci	r24, 0x00	; 0
 60c:	90 40       	sbci	r25, 0x00	; 0
 60e:	e1 f7       	brne	.-8      	; 0x608 <eeprom_update+0x88>
 610:	00 c0       	rjmp	.+0      	; 0x612 <eeprom_update+0x92>
 612:	00 00       	nop
	return ;
}
 614:	df 91       	pop	r29
 616:	cf 91       	pop	r28
 618:	1f 91       	pop	r17
 61a:	0f 91       	pop	r16
 61c:	08 95       	ret

0000061e <main_loop>:

void main_loop(){
	char s=0;
here1:gsm_sim_status();
 61e:	0e 94 77 01 	call	0x2ee	; 0x2ee <gsm_sim_status>
	thread_on(std_by);
 622:	80 e0       	ldi	r24, 0x00	; 0
 624:	0e 94 65 02 	call	0x4ca	; 0x4ca <thread_on>
	lcd_gotoxy(0,1);lcd_puts("# For change num");_delay_ms(1000);lcd_bck_off();
 628:	61 e0       	ldi	r22, 0x01	; 1
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <lcd_gotoxy>
 630:	80 ef       	ldi	r24, 0xF0	; 240
 632:	91 e0       	ldi	r25, 0x01	; 1
 634:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
 638:	2f ef       	ldi	r18, 0xFF	; 255
 63a:	8f eb       	ldi	r24, 0xBF	; 191
 63c:	91 e2       	ldi	r25, 0x21	; 33
 63e:	21 50       	subi	r18, 0x01	; 1
 640:	80 40       	sbci	r24, 0x00	; 0
 642:	90 40       	sbci	r25, 0x00	; 0
 644:	e1 f7       	brne	.-8      	; 0x63e <main_loop+0x20>
 646:	00 c0       	rjmp	.+0      	; 0x648 <main_loop+0x2a>
 648:	00 00       	nop
 64a:	0e 94 11 05 	call	0xa22	; 0xa22 <lcd_bck_off>
	while(((PIN(KPAD_PORT)&0xf0)==0xf0)&&(!(PINA&0b00000001)));
 64e:	86 b3       	in	r24, 0x16	; 22
 650:	80 7f       	andi	r24, 0xF0	; 240
 652:	80 3f       	cpi	r24, 0xF0	; 240
 654:	11 f4       	brne	.+4      	; 0x65a <main_loop+0x3c>
 656:	c8 9b       	sbis	0x19, 0	; 25
 658:	fa cf       	rjmp	.-12     	; 0x64e <main_loop+0x30>
	TIMSK&=~(1<<TOIE1);
 65a:	89 b7       	in	r24, 0x39	; 57
 65c:	8b 7f       	andi	r24, 0xFB	; 251
 65e:	89 bf       	out	0x39, r24	; 57
	if ((PIN(KPAD_PORT)&0xf0)!=0xf0){
 660:	86 b3       	in	r24, 0x16	; 22
 662:	80 7f       	andi	r24, 0xF0	; 240
 664:	80 3f       	cpi	r24, 0xF0	; 240
 666:	51 f0       	breq	.+20     	; 0x67c <main_loop+0x5e>
	s=Key_get_char();
 668:	0e 94 6b 05 	call	0xad6	; 0xad6 <Key_get_char>
 66c:	c8 2f       	mov	r28, r24
	lcd_bck_on();
 66e:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <lcd_bck_on>
	if (s=='#'){
 672:	c3 32       	cpi	r28, 0x23	; 35
 674:	99 f4       	brne	.+38     	; 0x69c <main_loop+0x7e>
		eeprom_update();
 676:	0e 94 c0 02 	call	0x580	; 0x580 <eeprom_update>
 67a:	10 c0       	rjmp	.+32     	; 0x69c <main_loop+0x7e>
	  }
	}
	else{
		lcd_clrscr();
 67c:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
		anim_on();
 680:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <anim_on>
		lcd_bck_on();
 684:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <lcd_bck_on>
		lcd_puts("sending massage");
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	92 e0       	ldi	r25, 0x02	; 2
 68c:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
		anim_done();
 690:	0e 94 74 02 	call	0x4e8	; 0x4e8 <anim_done>
		gsm_send_message("Intruder detected in your room");
 694:	81 e1       	ldi	r24, 0x11	; 17
 696:	92 e0       	ldi	r25, 0x02	; 2
 698:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <gsm_send_message>
 69c:	2f ef       	ldi	r18, 0xFF	; 255
 69e:	8f e9       	ldi	r24, 0x9F	; 159
 6a0:	97 e1       	ldi	r25, 0x17	; 23
 6a2:	21 50       	subi	r18, 0x01	; 1
 6a4:	80 40       	sbci	r24, 0x00	; 0
 6a6:	90 40       	sbci	r25, 0x00	; 0
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <main_loop+0x84>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <main_loop+0x8e>
 6ac:	00 00       	nop
 6ae:	b7 cf       	rjmp	.-146    	; 0x61e <main_loop>

000006b0 <main>:
	 _delay_ms(700);
	 goto here1;
}

int main(void){
	DDRA=0b11111110;
 6b0:	8e ef       	ldi	r24, 0xFE	; 254
 6b2:	8a bb       	out	0x1a, r24	; 26
	DDR(KPAD_PORT)=0b00001111;
 6b4:	8f e0       	ldi	r24, 0x0F	; 15
 6b6:	87 bb       	out	0x17, r24	; 23
	setup_ini();
 6b8:	0e 94 7f 02 	call	0x4fe	; 0x4fe <setup_ini>
	gsm_sim_status();
 6bc:	0e 94 77 01 	call	0x2ee	; 0x2ee <gsm_sim_status>
	gsm_reg();
 6c0:	0e 94 3a 01 	call	0x274	; 0x274 <gsm_reg>
	lcd_clrscr();
 6c4:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
	main_loop();
 6c8:	0e 94 0f 03 	call	0x61e	; 0x61e <main_loop>

000006cc <__vector_9>:
	return 0;
}

ISR(TIMER0_OVF_vect){
 6cc:	1f 92       	push	r1
 6ce:	0f 92       	push	r0
 6d0:	0f b6       	in	r0, 0x3f	; 63
 6d2:	0f 92       	push	r0
 6d4:	11 24       	eor	r1, r1
 6d6:	2f 93       	push	r18
 6d8:	3f 93       	push	r19
 6da:	4f 93       	push	r20
 6dc:	5f 93       	push	r21
 6de:	6f 93       	push	r22
 6e0:	7f 93       	push	r23
 6e2:	8f 93       	push	r24
 6e4:	9f 93       	push	r25
 6e6:	af 93       	push	r26
 6e8:	bf 93       	push	r27
 6ea:	ef 93       	push	r30
 6ec:	ff 93       	push	r31
	time_count++;
 6ee:	80 91 3d 02 	lds	r24, 0x023D
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	98 0f       	add	r25, r24
 6f6:	90 93 3d 02 	sts	0x023D, r25
	if ((time_count==8)||(time_count==16)||(time_count==24)){
 6fa:	87 7f       	andi	r24, 0xF7	; 247
 6fc:	87 30       	cpi	r24, 0x07	; 7
 6fe:	11 f0       	breq	.+4      	; 0x704 <__vector_9+0x38>
 700:	98 31       	cpi	r25, 0x18	; 24
 702:	61 f4       	brne	.+24     	; 0x71c <__vector_9+0x50>
		lcd_gotoxy(15,1);
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	8f e0       	ldi	r24, 0x0F	; 15
 708:	0e 94 7e 04 	call	0x8fc	; 0x8fc <lcd_gotoxy>
		lcd_put_cus((time_count/8)-1);
 70c:	80 91 3d 02 	lds	r24, 0x023D
 710:	86 95       	lsr	r24
 712:	86 95       	lsr	r24
 714:	86 95       	lsr	r24
 716:	81 50       	subi	r24, 0x01	; 1
 718:	0e 94 4d 05 	call	0xa9a	; 0xa9a <lcd_put_cus>
	}
	if (time_count>24) time_count=0;
 71c:	80 91 3d 02 	lds	r24, 0x023D
 720:	89 31       	cpi	r24, 0x19	; 25
 722:	10 f0       	brcs	.+4      	; 0x728 <__vector_9+0x5c>
 724:	10 92 3d 02 	sts	0x023D, r1
}
 728:	ff 91       	pop	r31
 72a:	ef 91       	pop	r30
 72c:	bf 91       	pop	r27
 72e:	af 91       	pop	r26
 730:	9f 91       	pop	r25
 732:	8f 91       	pop	r24
 734:	7f 91       	pop	r23
 736:	6f 91       	pop	r22
 738:	5f 91       	pop	r21
 73a:	4f 91       	pop	r20
 73c:	3f 91       	pop	r19
 73e:	2f 91       	pop	r18
 740:	0f 90       	pop	r0
 742:	0f be       	out	0x3f, r0	; 63
 744:	0f 90       	pop	r0
 746:	1f 90       	pop	r1
 748:	18 95       	reti

0000074a <__vector_8>:
ISR(TIMER1_OVF_vect){
 74a:	1f 92       	push	r1
 74c:	0f 92       	push	r0
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	0f 92       	push	r0
 752:	11 24       	eor	r1, r1
 754:	2f 93       	push	r18
 756:	3f 93       	push	r19
 758:	4f 93       	push	r20
 75a:	5f 93       	push	r21
 75c:	6f 93       	push	r22
 75e:	7f 93       	push	r23
 760:	8f 93       	push	r24
 762:	9f 93       	push	r25
 764:	af 93       	push	r26
 766:	bf 93       	push	r27
 768:	ef 93       	push	r30
 76a:	ff 93       	push	r31
	if (mode_p)
 76c:	80 91 3c 02 	lds	r24, 0x023C
 770:	88 23       	and	r24, r24
 772:	99 f0       	breq	.+38     	; 0x79a <__vector_8+0x50>
	{
	lcd_clrscr();
 774:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
	lcd_puts("   TIMEOUT");
 778:	80 e3       	ldi	r24, 0x30	; 48
 77a:	92 e0       	ldi	r25, 0x02	; 2
 77c:	0e 94 a1 04 	call	0x942	; 0x942 <lcd_puts>
 780:	2f ef       	ldi	r18, 0xFF	; 255
 782:	8f e9       	ldi	r24, 0x9F	; 159
 784:	97 e1       	ldi	r25, 0x17	; 23
 786:	21 50       	subi	r18, 0x01	; 1
 788:	80 40       	sbci	r24, 0x00	; 0
 78a:	90 40       	sbci	r25, 0x00	; 0
 78c:	e1 f7       	brne	.-8      	; 0x786 <__vector_8+0x3c>
 78e:	00 c0       	rjmp	.+0      	; 0x790 <__vector_8+0x46>
 790:	00 00       	nop
	_delay_ms(700);
	lcd_clrscr();
 792:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
	main_loop();
 796:	0e 94 0f 03 	call	0x61e	; 0x61e <main_loop>
	}
	else {
		gsm_sig_q();
 79a:	0e 94 ad 01 	call	0x35a	; 0x35a <gsm_sig_q>
	}
}
 79e:	ff 91       	pop	r31
 7a0:	ef 91       	pop	r30
 7a2:	bf 91       	pop	r27
 7a4:	af 91       	pop	r26
 7a6:	9f 91       	pop	r25
 7a8:	8f 91       	pop	r24
 7aa:	7f 91       	pop	r23
 7ac:	6f 91       	pop	r22
 7ae:	5f 91       	pop	r21
 7b0:	4f 91       	pop	r20
 7b2:	3f 91       	pop	r19
 7b4:	2f 91       	pop	r18
 7b6:	0f 90       	pop	r0
 7b8:	0f be       	out	0x3f, r0	; 63
 7ba:	0f 90       	pop	r0
 7bc:	1f 90       	pop	r1
 7be:	18 95       	reti

000007c0 <__vector_11>:

ISR(USART_RXC_vect){
 7c0:	1f 92       	push	r1
 7c2:	0f 92       	push	r0
 7c4:	0f b6       	in	r0, 0x3f	; 63
 7c6:	0f 92       	push	r0
 7c8:	11 24       	eor	r1, r1
 7ca:	2f 93       	push	r18
 7cc:	3f 93       	push	r19
 7ce:	4f 93       	push	r20
 7d0:	5f 93       	push	r21
 7d2:	6f 93       	push	r22
 7d4:	7f 93       	push	r23
 7d6:	8f 93       	push	r24
 7d8:	9f 93       	push	r25
 7da:	af 93       	push	r26
 7dc:	bf 93       	push	r27
 7de:	ef 93       	push	r30
 7e0:	ff 93       	push	r31
	lcd_putc(UDR);
 7e2:	8c b1       	in	r24, 0x0c	; 12
 7e4:	0e 94 8c 04 	call	0x918	; 0x918 <lcd_putc>
 7e8:	ff 91       	pop	r31
 7ea:	ef 91       	pop	r30
 7ec:	bf 91       	pop	r27
 7ee:	af 91       	pop	r26
 7f0:	9f 91       	pop	r25
 7f2:	8f 91       	pop	r24
 7f4:	7f 91       	pop	r23
 7f6:	6f 91       	pop	r22
 7f8:	5f 91       	pop	r21
 7fa:	4f 91       	pop	r20
 7fc:	3f 91       	pop	r19
 7fe:	2f 91       	pop	r18
 800:	0f 90       	pop	r0
 802:	0f be       	out	0x3f, r0	; 63
 804:	0f 90       	pop	r0
 806:	1f 90       	pop	r1
 808:	18 95       	reti

0000080a <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
 80a:	ad 9a       	sbi	0x15, 5	; 21
    lcd_e_delay();
 80c:	00 c0       	rjmp	.+0      	; 0x80e <toggle_e+0x4>
    lcd_e_low();
 80e:	ad 98       	cbi	0x15, 5	; 21
 810:	08 95       	ret

00000812 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
 812:	cf 93       	push	r28
 814:	c8 2f       	mov	r28, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
 816:	66 23       	and	r22, r22
 818:	11 f0       	breq	.+4      	; 0x81e <lcd_write+0xc>
       lcd_rs_high();
 81a:	af 9a       	sbi	0x15, 7	; 21
 81c:	01 c0       	rjmp	.+2      	; 0x820 <lcd_write+0xe>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
 81e:	af 98       	cbi	0x15, 7	; 21
    }
    lcd_rw_low();
 820:	ae 98       	cbi	0x15, 6	; 21
        LCD_DATA0_PORT = dataBits | 0x0F;
    }
    else
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 822:	a3 9a       	sbi	0x14, 3	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 824:	a2 9a       	sbi	0x14, 2	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 826:	a1 9a       	sbi	0x14, 1	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 828:	a0 9a       	sbi	0x14, 0	; 20
        
        /* output high nibble first */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 82a:	a8 98       	cbi	0x15, 0	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 82c:	a9 98       	cbi	0x15, 1	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 82e:	aa 98       	cbi	0x15, 2	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 830:	ab 98       	cbi	0x15, 3	; 21
    	if(data & 0x80) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 832:	cc 23       	and	r28, r28
 834:	0c f4       	brge	.+2      	; 0x838 <lcd_write+0x26>
 836:	a8 9a       	sbi	0x15, 0	; 21
    	if(data & 0x40) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 838:	c6 fd       	sbrc	r28, 6
 83a:	a9 9a       	sbi	0x15, 1	; 21
    	if(data & 0x20) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 83c:	c5 fd       	sbrc	r28, 5
 83e:	aa 9a       	sbi	0x15, 2	; 21
    	if(data & 0x10) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);   
 840:	c4 fd       	sbrc	r28, 4
 842:	ab 9a       	sbi	0x15, 3	; 21
        lcd_e_toggle();
 844:	0e 94 05 04 	call	0x80a	; 0x80a <toggle_e>
        
        /* output low nibble */
        LCD_DATA3_PORT &= ~_BV(LCD_DATA3_PIN);
 848:	a8 98       	cbi	0x15, 0	; 21
        LCD_DATA2_PORT &= ~_BV(LCD_DATA2_PIN);
 84a:	a9 98       	cbi	0x15, 1	; 21
        LCD_DATA1_PORT &= ~_BV(LCD_DATA1_PIN);
 84c:	aa 98       	cbi	0x15, 2	; 21
        LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);
 84e:	ab 98       	cbi	0x15, 3	; 21
    	if(data & 0x08) LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 850:	c3 fd       	sbrc	r28, 3
 852:	a8 9a       	sbi	0x15, 0	; 21
    	if(data & 0x04) LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 854:	c2 fd       	sbrc	r28, 2
 856:	a9 9a       	sbi	0x15, 1	; 21
    	if(data & 0x02) LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 858:	c1 fd       	sbrc	r28, 1
 85a:	aa 9a       	sbi	0x15, 2	; 21
    	if(data & 0x01) LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 85c:	c0 fd       	sbrc	r28, 0
 85e:	ab 9a       	sbi	0x15, 3	; 21
        lcd_e_toggle();        
 860:	0e 94 05 04 	call	0x80a	; 0x80a <toggle_e>
        
        /* all data pins high (inactive) */
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
 864:	ab 9a       	sbi	0x15, 3	; 21
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
 866:	aa 9a       	sbi	0x15, 2	; 21
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
 868:	a9 9a       	sbi	0x15, 1	; 21
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
 86a:	a8 9a       	sbi	0x15, 0	; 21
    }
}
 86c:	cf 91       	pop	r28
 86e:	08 95       	ret

00000870 <lcd_read>:
 uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
 870:	88 23       	and	r24, r24
 872:	11 f0       	breq	.+4      	; 0x878 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
 874:	af 9a       	sbi	0x15, 7	; 21
 876:	01 c0       	rjmp	.+2      	; 0x87a <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
 878:	af 98       	cbi	0x15, 7	; 21
    lcd_rw_high();                           /* RW=1  read mode      */
 87a:	ae 9a       	sbi	0x15, 6	; 21
        lcd_e_low();
    }
    else
    {
        /* configure data pins as input */
        DDR(LCD_DATA0_PORT) &= ~_BV(LCD_DATA0_PIN);
 87c:	a3 98       	cbi	0x14, 3	; 20
        DDR(LCD_DATA1_PORT) &= ~_BV(LCD_DATA1_PIN);
 87e:	a2 98       	cbi	0x14, 2	; 20
        DDR(LCD_DATA2_PORT) &= ~_BV(LCD_DATA2_PIN);
 880:	a1 98       	cbi	0x14, 1	; 20
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
 882:	a0 98       	cbi	0x14, 0	; 20
                
        /* read high nibble first */
        lcd_e_high();
 884:	ad 9a       	sbi	0x15, 5	; 21
        lcd_e_delay();        
 886:	00 c0       	rjmp	.+0      	; 0x888 <lcd_read+0x18>
        data = 0;
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 888:	9b 99       	sbic	0x13, 3	; 19
 88a:	02 c0       	rjmp	.+4      	; 0x890 <lcd_read+0x20>
        DDR(LCD_DATA3_PORT) &= ~_BV(LCD_DATA3_PIN);
                
        /* read high nibble first */
        lcd_e_high();
        lcd_e_delay();        
        data = 0;
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	01 c0       	rjmp	.+2      	; 0x892 <lcd_read+0x22>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x10;
 890:	80 e1       	ldi	r24, 0x10	; 16
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x20;
 892:	9a 99       	sbic	0x13, 2	; 19
 894:	80 62       	ori	r24, 0x20	; 32
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x40;
 896:	99 99       	sbic	0x13, 1	; 19
 898:	80 64       	ori	r24, 0x40	; 64
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x80;
 89a:	98 99       	sbic	0x13, 0	; 19
 89c:	80 68       	ori	r24, 0x80	; 128
        lcd_e_low();
 89e:	ad 98       	cbi	0x15, 5	; 21

        lcd_e_delay();                       /* Enable 500ns low       */
 8a0:	00 c0       	rjmp	.+0      	; 0x8a2 <lcd_read+0x32>
    
        /* read low nibble */    
        lcd_e_high();
 8a2:	ad 9a       	sbi	0x15, 5	; 21
        lcd_e_delay();
 8a4:	00 c0       	rjmp	.+0      	; 0x8a6 <lcd_read+0x36>
        if ( PIN(LCD_DATA0_PORT) & _BV(LCD_DATA0_PIN) ) data |= 0x01;
 8a6:	9b 99       	sbic	0x13, 3	; 19
 8a8:	81 60       	ori	r24, 0x01	; 1
        if ( PIN(LCD_DATA1_PORT) & _BV(LCD_DATA1_PIN) ) data |= 0x02;
 8aa:	9a 99       	sbic	0x13, 2	; 19
 8ac:	82 60       	ori	r24, 0x02	; 2
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
 8ae:	99 99       	sbic	0x13, 1	; 19
 8b0:	84 60       	ori	r24, 0x04	; 4
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
 8b2:	98 99       	sbic	0x13, 0	; 19
 8b4:	88 60       	ori	r24, 0x08	; 8
        lcd_e_low();
 8b6:	ad 98       	cbi	0x15, 5	; 21
    }
    return data;
}
 8b8:	08 95       	ret

000008ba <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 8ba:	80 e0       	ldi	r24, 0x00	; 0
 8bc:	0e 94 38 04 	call	0x870	; 0x870 <lcd_read>
 8c0:	88 23       	and	r24, r24
 8c2:	dc f3       	brlt	.-10     	; 0x8ba <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 8c4:	85 e0       	ldi	r24, 0x05	; 5
 8c6:	90 e0       	ldi	r25, 0x00	; 0
 8c8:	01 97       	sbiw	r24, 0x01	; 1
 8ca:	f1 f7       	brne	.-4      	; 0x8c8 <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 8cc:	80 e0       	ldi	r24, 0x00	; 0
 8ce:	0e 94 38 04 	call	0x870	; 0x870 <lcd_read>
    
}/* lcd_waitbusy */
 8d2:	08 95       	ret

000008d4 <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 8d4:	cf 93       	push	r28
 8d6:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 8d8:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lcd_waitbusy>
    lcd_write(cmd,0);
 8dc:	60 e0       	ldi	r22, 0x00	; 0
 8de:	8c 2f       	mov	r24, r28
 8e0:	0e 94 09 04 	call	0x812	; 0x812 <lcd_write>
}
 8e4:	cf 91       	pop	r28
 8e6:	08 95       	ret

000008e8 <lcd_data>:
Send data byte to LCD controller 
Input:   data to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_data(uint8_t data)
{
 8e8:	cf 93       	push	r28
 8ea:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 8ec:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lcd_waitbusy>
    lcd_write(data,1);
 8f0:	61 e0       	ldi	r22, 0x01	; 1
 8f2:	8c 2f       	mov	r24, r28
 8f4:	0e 94 09 04 	call	0x812	; 0x812 <lcd_write>
}
 8f8:	cf 91       	pop	r28
 8fa:	08 95       	ret

000008fc <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 8fc:	61 11       	cpse	r22, r1
 8fe:	04 c0       	rjmp	.+8      	; 0x908 <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 900:	80 58       	subi	r24, 0x80	; 128
 902:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
 906:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 908:	80 54       	subi	r24, 0x40	; 64
 90a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
 90e:	08 95       	ret

00000910 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
 916:	08 95       	ret

00000918 <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 918:	cf 93       	push	r28
 91a:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 91c:	0e 94 5d 04 	call	0x8ba	; 0x8ba <lcd_waitbusy>
    if (c=='\n')
 920:	ca 30       	cpi	r28, 0x0A	; 10
 922:	49 f4       	brne	.+18     	; 0x936 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 924:	80 34       	cpi	r24, 0x40	; 64
 926:	10 f4       	brcc	.+4      	; 0x92c <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
 928:	80 e4       	ldi	r24, 0x40	; 64
 92a:	01 c0       	rjmp	.+2      	; 0x92e <lcd_putc+0x16>
    else
        addressCounter = LCD_START_LINE1;
 92c:	80 e0       	ldi	r24, 0x00	; 0
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 92e:	80 58       	subi	r24, 0x80	; 128
 930:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
 934:	04 c0       	rjmp	.+8      	; 0x93e <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 936:	61 e0       	ldi	r22, 0x01	; 1
 938:	8c 2f       	mov	r24, r28
 93a:	0e 94 09 04 	call	0x812	; 0x812 <lcd_write>
    }

}/* lcd_putc */
 93e:	cf 91       	pop	r28
 940:	08 95       	ret

00000942 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 942:	cf 93       	push	r28
 944:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 946:	ec 01       	movw	r28, r24
 948:	21 96       	adiw	r28, 0x01	; 1
 94a:	fc 01       	movw	r30, r24
 94c:	80 81       	ld	r24, Z
 94e:	88 23       	and	r24, r24
 950:	29 f0       	breq	.+10     	; 0x95c <lcd_puts+0x1a>
        lcd_putc(c);
 952:	0e 94 8c 04 	call	0x918	; 0x918 <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 956:	89 91       	ld	r24, Y+
 958:	81 11       	cpse	r24, r1
 95a:	fb cf       	rjmp	.-10     	; 0x952 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 95c:	df 91       	pop	r29
 95e:	cf 91       	pop	r28
 960:	08 95       	ret

00000962 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 962:	cf 93       	push	r28
 964:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
 966:	a7 9a       	sbi	0x14, 7	; 20
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
 968:	a6 9a       	sbi	0x14, 6	; 20
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
 96a:	a5 9a       	sbi	0x14, 5	; 20
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
 96c:	a3 9a       	sbi	0x14, 3	; 20
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
 96e:	a2 9a       	sbi	0x14, 2	; 20
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
 970:	a1 9a       	sbi	0x14, 1	; 20
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
 972:	a0 9a       	sbi	0x14, 0	; 20
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 974:	e0 ec       	ldi	r30, 0xC0	; 192
 976:	fc ea       	ldi	r31, 0xAC	; 172
 978:	31 97       	sbiw	r30, 0x01	; 1
 97a:	f1 f7       	brne	.-4      	; 0x978 <lcd_init+0x16>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 97c:	aa 9a       	sbi	0x15, 2	; 21
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 97e:	ab 9a       	sbi	0x15, 3	; 21
    lcd_e_toggle();
 980:	0e 94 05 04 	call	0x80a	; 0x80a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 984:	e5 ee       	ldi	r30, 0xE5	; 229
 986:	f5 e3       	ldi	r31, 0x35	; 53
 988:	31 97       	sbiw	r30, 0x01	; 1
 98a:	f1 f7       	brne	.-4      	; 0x988 <lcd_init+0x26>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 98c:	0e 94 05 04 	call	0x80a	; 0x80a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 990:	e0 eb       	ldi	r30, 0xB0	; 176
 992:	f0 e0       	ldi	r31, 0x00	; 0
 994:	31 97       	sbiw	r30, 0x01	; 1
 996:	f1 f7       	brne	.-4      	; 0x994 <lcd_init+0x32>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 998:	0e 94 05 04 	call	0x80a	; 0x80a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 99c:	e0 eb       	ldi	r30, 0xB0	; 176
 99e:	f0 e0       	ldi	r31, 0x00	; 0
 9a0:	31 97       	sbiw	r30, 0x01	; 1
 9a2:	f1 f7       	brne	.-4      	; 0x9a0 <lcd_init+0x3e>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 9a4:	ab 98       	cbi	0x15, 3	; 21
    lcd_e_toggle();
 9a6:	0e 94 05 04 	call	0x80a	; 0x80a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 9aa:	e0 eb       	ldi	r30, 0xB0	; 176
 9ac:	f0 e0       	ldi	r31, 0x00	; 0
 9ae:	31 97       	sbiw	r30, 0x01	; 1
 9b0:	f1 f7       	brne	.-4      	; 0x9ae <lcd_init+0x4c>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 9b2:	88 e2       	ldi	r24, 0x28	; 40
 9b4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 9b8:	88 e0       	ldi	r24, 0x08	; 8
 9ba:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 9be:	0e 94 88 04 	call	0x910	; 0x910 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 9c2:	86 e0       	ldi	r24, 0x06	; 6
 9c4:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 9c8:	8c 2f       	mov	r24, r28
 9ca:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>

}/* lcd_init */
 9ce:	cf 91       	pop	r28
 9d0:	08 95       	ret

000009d2 <lcd_bck_pwm>:
/*Functions for controlling back light of lcd*/
void lcd_bck_pwm(uint8_t duty){
	for (char i=0;i<255;i++)
 9d2:	90 e0       	ldi	r25, 0x00	; 0
	{
		if(i<=duty) LCD_BL_PORT|=(1<<LCD_BL_PIN);
 9d4:	89 17       	cp	r24, r25
 9d6:	10 f0       	brcs	.+4      	; 0x9dc <lcd_bck_pwm+0xa>
 9d8:	ac 9a       	sbi	0x15, 4	; 21
 9da:	01 c0       	rjmp	.+2      	; 0x9de <lcd_bck_pwm+0xc>
		else if(i>duty) LCD_BL_PORT&=~(1<<LCD_BL_PIN);
 9dc:	ac 98       	cbi	0x15, 4	; 21
    lcd_command(dispAttr);                  /* display/cursor control       */

}/* lcd_init */
/*Functions for controlling back light of lcd*/
void lcd_bck_pwm(uint8_t duty){
	for (char i=0;i<255;i++)
 9de:	9f 5f       	subi	r25, 0xFF	; 255
 9e0:	9f 3f       	cpi	r25, 0xFF	; 255
 9e2:	c1 f7       	brne	.-16     	; 0x9d4 <lcd_bck_pwm+0x2>
	{
		if(i<=duty) LCD_BL_PORT|=(1<<LCD_BL_PIN);
		else if(i>duty) LCD_BL_PORT&=~(1<<LCD_BL_PIN);
	}
}
 9e4:	08 95       	ret

000009e6 <lcd_bck_on>:

void lcd_bck_on(){
 9e6:	0f 93       	push	r16
 9e8:	1f 93       	push	r17
 9ea:	cf 93       	push	r28
 9ec:	df 93       	push	r29
	DDR(LCD_BL_PORT)|=(1<<LCD_BL_PIN);
 9ee:	a4 9a       	sbi	0x14, 4	; 20
	for (char i=0;i<6;i++)
 9f0:	10 e0       	ldi	r17, 0x00	; 0
	{
		for(char j=0;j<150;j++)
		lcd_bck_pwm(i*i*i);
 9f2:	06 e9       	ldi	r16, 0x96	; 150
 9f4:	08 c0       	rjmp	.+16     	; 0xa06 <lcd_bck_on+0x20>
 9f6:	8d 2f       	mov	r24, r29
 9f8:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <lcd_bck_pwm>
 9fc:	c1 50       	subi	r28, 0x01	; 1

void lcd_bck_on(){
	DDR(LCD_BL_PORT)|=(1<<LCD_BL_PIN);
	for (char i=0;i<6;i++)
	{
		for(char j=0;j<150;j++)
 9fe:	d9 f7       	brne	.-10     	; 0x9f6 <lcd_bck_on+0x10>
	}
}

void lcd_bck_on(){
	DDR(LCD_BL_PORT)|=(1<<LCD_BL_PIN);
	for (char i=0;i<6;i++)
 a00:	1f 5f       	subi	r17, 0xFF	; 255
 a02:	16 30       	cpi	r17, 0x06	; 6
 a04:	41 f0       	breq	.+16     	; 0xa16 <lcd_bck_on+0x30>
	{
		for(char j=0;j<150;j++)
		lcd_bck_pwm(i*i*i);
 a06:	11 9f       	mul	r17, r17
 a08:	d0 2d       	mov	r29, r0
 a0a:	11 24       	eor	r1, r1
 a0c:	d1 9f       	mul	r29, r17
 a0e:	d0 2d       	mov	r29, r0
 a10:	11 24       	eor	r1, r1
 a12:	c0 2f       	mov	r28, r16
 a14:	f0 cf       	rjmp	.-32     	; 0x9f6 <lcd_bck_on+0x10>
	}
	LCD_BL_PORT|=(1<<LCD_BL_PIN);
 a16:	ac 9a       	sbi	0x15, 4	; 21
}
 a18:	df 91       	pop	r29
 a1a:	cf 91       	pop	r28
 a1c:	1f 91       	pop	r17
 a1e:	0f 91       	pop	r16
 a20:	08 95       	ret

00000a22 <lcd_bck_off>:

void lcd_bck_off(){
	DDRC|=(1<<4);
 a22:	a4 9a       	sbi	0x14, 4	; 20
	PORTC&=~(1<<4);
 a24:	ac 98       	cbi	0x15, 4	; 21
 a26:	08 95       	ret

00000a28 <lcd_buf_ini>:
}

void lcd_buf_ini(void){
 a28:	bf 92       	push	r11
 a2a:	cf 92       	push	r12
 a2c:	df 92       	push	r13
 a2e:	ef 92       	push	r14
 a30:	ff 92       	push	r15
 a32:	0f 93       	push	r16
 a34:	1f 93       	push	r17
 a36:	cf 93       	push	r28
 a38:	df 93       	push	r29
	lcd_putc(' ');
 a3a:	80 e2       	ldi	r24, 0x20	; 32
 a3c:	0e 94 8c 04 	call	0x918	; 0x918 <lcd_putc>
	unsigned char addr=0;
	addr= lcd_read(0);
 a40:	80 e0       	ldi	r24, 0x00	; 0
 a42:	0e 94 38 04 	call	0x870	; 0x870 <lcd_read>
 a46:	b8 2e       	mov	r11, r24
	lcd_command(0x40);
 a48:	80 e4       	ldi	r24, 0x40	; 64
 a4a:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
 a4e:	06 e6       	ldi	r16, 0x66	; 102
 a50:	10 e0       	ldi	r17, 0x00	; 0
 a52:	0f 2e       	mov	r0, r31
 a54:	f6 ea       	ldi	r31, 0xA6	; 166
 a56:	ef 2e       	mov	r14, r31
 a58:	f0 e0       	ldi	r31, 0x00	; 0
 a5a:	ff 2e       	mov	r15, r31
 a5c:	f0 2d       	mov	r31, r0
void lcd_bck_off(){
	DDRC|=(1<<4);
	PORTC&=~(1<<4);
}

void lcd_buf_ini(void){
 a5e:	c1 2c       	mov	r12, r1
 a60:	0c c0       	rjmp	.+24     	; 0xa7a <lcd_buf_ini+0x52>
	unsigned char addr=0;
	addr= lcd_read(0);
	lcd_command(0x40);
	for(char i=0;i<8;++i){
		for(char j=0;j<8;++j){
			lcd_data(cus_chr[i].cus_c[j]);
 a62:	89 91       	ld	r24, Y+
 a64:	0e 94 74 04 	call	0x8e8	; 0x8e8 <lcd_data>
	lcd_putc(' ');
	unsigned char addr=0;
	addr= lcd_read(0);
	lcd_command(0x40);
	for(char i=0;i<8;++i){
		for(char j=0;j<8;++j){
 a68:	d3 94       	inc	r13
 a6a:	88 e0       	ldi	r24, 0x08	; 8
 a6c:	d8 12       	cpse	r13, r24
 a6e:	f9 cf       	rjmp	.-14     	; 0xa62 <lcd_buf_ini+0x3a>
 a70:	08 5f       	subi	r16, 0xF8	; 248
 a72:	1f 4f       	sbci	r17, 0xFF	; 255
void lcd_buf_ini(void){
	lcd_putc(' ');
	unsigned char addr=0;
	addr= lcd_read(0);
	lcd_command(0x40);
	for(char i=0;i<8;++i){
 a74:	0e 15       	cp	r16, r14
 a76:	1f 05       	cpc	r17, r15
 a78:	19 f0       	breq	.+6      	; 0xa80 <lcd_buf_ini+0x58>
void lcd_bck_off(){
	DDRC|=(1<<4);
	PORTC&=~(1<<4);
}

void lcd_buf_ini(void){
 a7a:	e8 01       	movw	r28, r16
 a7c:	dc 2c       	mov	r13, r12
 a7e:	f1 cf       	rjmp	.-30     	; 0xa62 <lcd_buf_ini+0x3a>
	for(char i=0;i<8;++i){
		for(char j=0;j<8;++j){
			lcd_data(cus_chr[i].cus_c[j]);
	}
 }
 lcd_command(addr);
 a80:	8b 2d       	mov	r24, r11
 a82:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
}
 a86:	df 91       	pop	r29
 a88:	cf 91       	pop	r28
 a8a:	1f 91       	pop	r17
 a8c:	0f 91       	pop	r16
 a8e:	ff 90       	pop	r15
 a90:	ef 90       	pop	r14
 a92:	df 90       	pop	r13
 a94:	cf 90       	pop	r12
 a96:	bf 90       	pop	r11
 a98:	08 95       	ret

00000a9a <lcd_put_cus>:

void lcd_put_cus(unsigned char index){
 a9a:	cf 93       	push	r28
 a9c:	c8 2f       	mov	r28, r24
		lcd_buf_ini();
 a9e:	0e 94 14 05 	call	0xa28	; 0xa28 <lcd_buf_ini>
		lcd_data(index);
 aa2:	8c 2f       	mov	r24, r28
 aa4:	0e 94 74 04 	call	0x8e8	; 0x8e8 <lcd_data>
}
 aa8:	cf 91       	pop	r28
 aaa:	08 95       	ret

00000aac <lcd_bck_spc>:

void lcd_bck_spc(void){
 aac:	cf 93       	push	r28
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 aae:	84 e1       	ldi	r24, 0x14	; 20
 ab0:	91 e0       	ldi	r25, 0x01	; 1
 ab2:	01 97       	sbiw	r24, 0x01	; 1
 ab4:	f1 f7       	brne	.-4      	; 0xab2 <lcd_bck_spc+0x6>
		lcd_data(index);
}

void lcd_bck_spc(void){
	delay(100);
		char addr = lcd_read(0);
 ab6:	80 e0       	ldi	r24, 0x00	; 0
 ab8:	0e 94 38 04 	call	0x870	; 0x870 <lcd_read>
		lcd_command((1<<LCD_DDRAM)+(addr-1));
 abc:	cf e7       	ldi	r28, 0x7F	; 127
 abe:	c8 0f       	add	r28, r24
 ac0:	8c 2f       	mov	r24, r28
 ac2:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
		lcd_putc(' ');
 ac6:	80 e2       	ldi	r24, 0x20	; 32
 ac8:	0e 94 8c 04 	call	0x918	; 0x918 <lcd_putc>
		lcd_command((1<<LCD_DDRAM)+(addr-1));
 acc:	8c 2f       	mov	r24, r28
 ace:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <lcd_command>
 ad2:	cf 91       	pop	r28
 ad4:	08 95       	ret

00000ad6 <Key_get_char>:
						{'4','5','6','B'},
						{'7','8','9','C'},
						{'*','0','#','D'}	
					};

char Key_get_char(void){
 ad6:	cf 93       	push	r28
 ad8:	df 93       	push	r29
	DDR(KPAD_PORT)=0b00001111;				//setting direction for output and input
 ada:	8f e0       	ldi	r24, 0x0F	; 15
 adc:	87 bb       	out	0x17, r24	; 23
	while((PIN(KPAD_PORT)&0xf0)==0xf0);		//wait until key is pressed
 ade:	86 b3       	in	r24, 0x16	; 22
 ae0:	80 7f       	andi	r24, 0xF0	; 240
 ae2:	80 3f       	cpi	r24, 0xF0	; 240
 ae4:	e1 f3       	breq	.-8      	; 0xade <Key_get_char+0x8>
 ae6:	22 e3       	ldi	r18, 0x32	; 50
 ae8:	83 e0       	ldi	r24, 0x03	; 3
 aea:	91 e0       	ldi	r25, 0x01	; 1
 aec:	21 50       	subi	r18, 0x01	; 1
 aee:	80 40       	sbci	r24, 0x00	; 0
 af0:	90 40       	sbci	r25, 0x00	; 0
 af2:	e1 f7       	brne	.-8      	; 0xaec <Key_get_char+0x16>
 af4:	00 c0       	rjmp	.+0      	; 0xaf6 <Key_get_char+0x20>
 af6:	00 c0       	rjmp	.+0      	; 0xaf8 <Key_get_char+0x22>
 af8:	40 e0       	ldi	r20, 0x00	; 0
 afa:	50 e0       	ldi	r21, 0x00	; 0
	_delay_ms(30);
	for (char i=0;i<4;i++){					//scanning for rows
		KPAD_PORT=~(1<<i);
 afc:	e1 e0       	ldi	r30, 0x01	; 1
 afe:	f0 e0       	ldi	r31, 0x00	; 0
		_delay_ms(10);
		for (char j=4;j<8;j++){				//now for columns 
			if (!(PIN(KPAD_PORT)&(1<<j))){	//checking for column key
 b00:	d5 e0       	ldi	r29, 0x05	; 5
 b02:	c0 e0       	ldi	r28, 0x00	; 0
char Key_get_char(void){
	DDR(KPAD_PORT)=0b00001111;				//setting direction for output and input
	while((PIN(KPAD_PORT)&0xf0)==0xf0);		//wait until key is pressed
	_delay_ms(30);
	for (char i=0;i<4;i++){					//scanning for rows
		KPAD_PORT=~(1<<i);
 b04:	da 01       	movw	r26, r20
 b06:	cf 01       	movw	r24, r30
 b08:	04 2e       	mov	r0, r20
 b0a:	02 c0       	rjmp	.+4      	; 0xb10 <Key_get_char+0x3a>
 b0c:	88 0f       	add	r24, r24
 b0e:	99 1f       	adc	r25, r25
 b10:	0a 94       	dec	r0
 b12:	e2 f7       	brpl	.-8      	; 0xb0c <Key_get_char+0x36>
 b14:	80 95       	com	r24
 b16:	88 bb       	out	0x18, r24	; 24
 b18:	8f ef       	ldi	r24, 0xFF	; 255
 b1a:	9b e6       	ldi	r25, 0x6B	; 107
 b1c:	01 97       	sbiw	r24, 0x01	; 1
 b1e:	f1 f7       	brne	.-4      	; 0xb1c <Key_get_char+0x46>
 b20:	00 c0       	rjmp	.+0      	; 0xb22 <Key_get_char+0x4c>
 b22:	00 00       	nop
		_delay_ms(10);
		for (char j=4;j<8;j++){				//now for columns 
			if (!(PIN(KPAD_PORT)&(1<<j))){	//checking for column key
 b24:	b4 9b       	sbis	0x16, 4	; 22
 b26:	0e c0       	rjmp	.+28     	; 0xb44 <Key_get_char+0x6e>
 b28:	8d 2f       	mov	r24, r29
 b2a:	9c 2f       	mov	r25, r28
 b2c:	26 b3       	in	r18, 0x16	; 22
 b2e:	bc 01       	movw	r22, r24
 b30:	30 e0       	ldi	r19, 0x00	; 0
 b32:	08 2e       	mov	r0, r24
 b34:	02 c0       	rjmp	.+4      	; 0xb3a <Key_get_char+0x64>
 b36:	35 95       	asr	r19
 b38:	27 95       	ror	r18
 b3a:	0a 94       	dec	r0
 b3c:	e2 f7       	brpl	.-8      	; 0xb36 <Key_get_char+0x60>
 b3e:	20 fd       	sbrc	r18, 0
 b40:	1a c0       	rjmp	.+52     	; 0xb76 <Key_get_char+0xa0>
 b42:	02 c0       	rjmp	.+4      	; 0xb48 <Key_get_char+0x72>
 b44:	64 e0       	ldi	r22, 0x04	; 4
 b46:	70 e0       	ldi	r23, 0x00	; 0
				while((PIN(KPAD_PORT)&0xf0)!=0xf0);//waiting until key is released
 b48:	86 b3       	in	r24, 0x16	; 22
 b4a:	80 7f       	andi	r24, 0xF0	; 240
 b4c:	80 3f       	cpi	r24, 0xF0	; 240
 b4e:	e1 f7       	brne	.-8      	; 0xb48 <Key_get_char+0x72>
 b50:	8f ef       	ldi	r24, 0xFF	; 255
 b52:	9b e6       	ldi	r25, 0x6B	; 107
 b54:	01 97       	sbiw	r24, 0x01	; 1
 b56:	f1 f7       	brne	.-4      	; 0xb54 <Key_get_char+0x7e>
 b58:	00 c0       	rjmp	.+0      	; 0xb5a <Key_get_char+0x84>
 b5a:	00 00       	nop
				_delay_ms(10);
				KPAD_PORT=0;PIN(KPAD_PORT)=0xff;//initiating port and pin register for next scan
 b5c:	18 ba       	out	0x18, r1	; 24
 b5e:	8f ef       	ldi	r24, 0xFF	; 255
 b60:	86 bb       	out	0x16, r24	; 22
				return keys[i][j-4];			//returning values from array
 b62:	aa 0f       	add	r26, r26
 b64:	bb 1f       	adc	r27, r27
 b66:	aa 0f       	add	r26, r26
 b68:	bb 1f       	adc	r27, r27
 b6a:	a6 0f       	add	r26, r22
 b6c:	b7 1f       	adc	r27, r23
 b6e:	ae 55       	subi	r26, 0x5E	; 94
 b70:	bf 4f       	sbci	r27, 0xFF	; 255
 b72:	8c 91       	ld	r24, X
 b74:	0a c0       	rjmp	.+20     	; 0xb8a <Key_get_char+0xb4>
 b76:	01 96       	adiw	r24, 0x01	; 1
	while((PIN(KPAD_PORT)&0xf0)==0xf0);		//wait until key is pressed
	_delay_ms(30);
	for (char i=0;i<4;i++){					//scanning for rows
		KPAD_PORT=~(1<<i);
		_delay_ms(10);
		for (char j=4;j<8;j++){				//now for columns 
 b78:	88 30       	cpi	r24, 0x08	; 8
 b7a:	91 05       	cpc	r25, r1
 b7c:	b9 f6       	brne	.-82     	; 0xb2c <Key_get_char+0x56>
 b7e:	4f 5f       	subi	r20, 0xFF	; 255
 b80:	5f 4f       	sbci	r21, 0xFF	; 255

char Key_get_char(void){
	DDR(KPAD_PORT)=0b00001111;				//setting direction for output and input
	while((PIN(KPAD_PORT)&0xf0)==0xf0);		//wait until key is pressed
	_delay_ms(30);
	for (char i=0;i<4;i++){					//scanning for rows
 b82:	44 30       	cpi	r20, 0x04	; 4
 b84:	51 05       	cpc	r21, r1
 b86:	09 f0       	breq	.+2      	; 0xb8a <Key_get_char+0xb4>
 b88:	bd cf       	rjmp	.-134    	; 0xb04 <Key_get_char+0x2e>
				KPAD_PORT=0;PIN(KPAD_PORT)=0xff;//initiating port and pin register for next scan
				return keys[i][j-4];			//returning values from array
			}
		}
	}
}
 b8a:	df 91       	pop	r29
 b8c:	cf 91       	pop	r28
 b8e:	08 95       	ret

00000b90 <Key_get_str>:


char *Key_get_str(char size, char *target){
 b90:	cf 92       	push	r12
 b92:	df 92       	push	r13
 b94:	ef 92       	push	r14
 b96:	ff 92       	push	r15
 b98:	0f 93       	push	r16
 b9a:	1f 93       	push	r17
 b9c:	cf 93       	push	r28
 b9e:	df 93       	push	r29
 ba0:	c8 2e       	mov	r12, r24
	target=(char*)malloc(size*sizeof(char));
 ba2:	90 e0       	ldi	r25, 0x00	; 0
 ba4:	0e 94 5f 06 	call	0xcbe	; 0xcbe <malloc>
 ba8:	8c 01       	movw	r16, r24
	if (target==0) return 0;
 baa:	00 97       	sbiw	r24, 0x00	; 0
 bac:	b9 f1       	breq	.+110    	; 0xc1c <Key_get_str+0x8c>
	else{
	int i=0;
	for(;(i<size&&(target[i-1]!='#'));i++) {
 bae:	d1 2c       	mov	r13, r1
 bb0:	1c 14       	cp	r1, r12
 bb2:	1d 04       	cpc	r1, r13
 bb4:	3c f5       	brge	.+78     	; 0xc04 <Key_get_str+0x74>
 bb6:	fc 01       	movw	r30, r24
 bb8:	31 97       	sbiw	r30, 0x01	; 1
 bba:	80 81       	ld	r24, Z
 bbc:	83 32       	cpi	r24, 0x23	; 35
 bbe:	29 f1       	breq	.+74     	; 0xc0a <Key_get_str+0x7a>
 bc0:	20 e0       	ldi	r18, 0x00	; 0
 bc2:	30 e0       	ldi	r19, 0x00	; 0
 bc4:	c0 e0       	ldi	r28, 0x00	; 0
 bc6:	d0 e0       	ldi	r29, 0x00	; 0
		target[i]=Key_get_char();
 bc8:	78 01       	movw	r14, r16
 bca:	e2 0e       	add	r14, r18
 bcc:	f3 1e       	adc	r15, r19
 bce:	0e 94 6b 05 	call	0xad6	; 0xad6 <Key_get_char>
 bd2:	f7 01       	movw	r30, r14
 bd4:	80 83       	st	Z, r24
		if (target[i]=='*'){
 bd6:	8a 32       	cpi	r24, 0x2A	; 42
 bd8:	21 f4       	brne	.+8      	; 0xbe2 <Key_get_str+0x52>
			lcd_bck_spc();
 bda:	0e 94 56 05 	call	0xaac	; 0xaac <lcd_bck_spc>
			i-=2;
 bde:	22 97       	sbiw	r28, 0x02	; 2
 be0:	04 c0       	rjmp	.+8      	; 0xbea <Key_get_str+0x5a>
		}
		else if(target[i]!='#') lcd_putc(target[i]);
 be2:	83 32       	cpi	r24, 0x23	; 35
 be4:	11 f0       	breq	.+4      	; 0xbea <Key_get_str+0x5a>
 be6:	0e 94 8c 04 	call	0x918	; 0x918 <lcd_putc>
char *Key_get_str(char size, char *target){
	target=(char*)malloc(size*sizeof(char));
	if (target==0) return 0;
	else{
	int i=0;
	for(;(i<size&&(target[i-1]!='#'));i++) {
 bea:	21 96       	adiw	r28, 0x01	; 1
 bec:	cc 15       	cp	r28, r12
 bee:	dd 05       	cpc	r29, r13
 bf0:	74 f4       	brge	.+28     	; 0xc0e <Key_get_str+0x7e>
 bf2:	9e 01       	movw	r18, r28
 bf4:	f8 01       	movw	r30, r16
 bf6:	ec 0f       	add	r30, r28
 bf8:	fd 1f       	adc	r31, r29
 bfa:	31 97       	sbiw	r30, 0x01	; 1
 bfc:	80 81       	ld	r24, Z
 bfe:	83 32       	cpi	r24, 0x23	; 35
 c00:	19 f7       	brne	.-58     	; 0xbc8 <Key_get_str+0x38>
 c02:	05 c0       	rjmp	.+10     	; 0xc0e <Key_get_str+0x7e>
 c04:	c0 e0       	ldi	r28, 0x00	; 0
 c06:	d0 e0       	ldi	r29, 0x00	; 0
 c08:	02 c0       	rjmp	.+4      	; 0xc0e <Key_get_str+0x7e>
 c0a:	c0 e0       	ldi	r28, 0x00	; 0
 c0c:	d0 e0       	ldi	r29, 0x00	; 0
			lcd_bck_spc();
			i-=2;
		}
		else if(target[i]!='#') lcd_putc(target[i]);
		}
	target[i-1]=0;
 c0e:	c0 0f       	add	r28, r16
 c10:	d1 1f       	adc	r29, r17
 c12:	21 97       	sbiw	r28, 0x01	; 1
 c14:	18 82       	st	Y, r1
	return target;
 c16:	80 2f       	mov	r24, r16
 c18:	91 2f       	mov	r25, r17
 c1a:	02 c0       	rjmp	.+4      	; 0xc20 <Key_get_str+0x90>
}


char *Key_get_str(char size, char *target){
	target=(char*)malloc(size*sizeof(char));
	if (target==0) return 0;
 c1c:	80 e0       	ldi	r24, 0x00	; 0
 c1e:	90 e0       	ldi	r25, 0x00	; 0
		else if(target[i]!='#') lcd_putc(target[i]);
		}
	target[i-1]=0;
	return target;
	}
}
 c20:	df 91       	pop	r29
 c22:	cf 91       	pop	r28
 c24:	1f 91       	pop	r17
 c26:	0f 91       	pop	r16
 c28:	ff 90       	pop	r15
 c2a:	ef 90       	pop	r14
 c2c:	df 90       	pop	r13
 c2e:	cf 90       	pop	r12
 c30:	08 95       	ret

00000c32 <serial_init>:
#include <avr/io.h>
#include "USART.h"
#include <stdlib.h>

void serial_init(){
		UCSRB=(1<<TXEN)|(1<<RXEN);		
 c32:	88 e1       	ldi	r24, 0x18	; 24
 c34:	8a b9       	out	0x0a, r24	; 10
		UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
 c36:	86 e8       	ldi	r24, 0x86	; 134
 c38:	80 bd       	out	0x20, r24	; 32
		UBRRL=71;                                  ///9600   baudrate at xtal 11.0592Mhz	
 c3a:	87 e4       	ldi	r24, 0x47	; 71
 c3c:	89 b9       	out	0x09, r24	; 9
 c3e:	08 95       	ret

00000c40 <serial_Erase_all>:
	UDR=byte;
}

void serial_Erase_all(void){
	unsigned char trash=0;
	while (UCSRA & (1<<RXC)){ 
 c40:	5f 9b       	sbis	0x0b, 7	; 11
 c42:	03 c0       	rjmp	.+6      	; 0xc4a <serial_Erase_all+0xa>
	trash=UDR;
 c44:	8c b1       	in	r24, 0x0c	; 12
	UDR=byte;
}

void serial_Erase_all(void){
	unsigned char trash=0;
	while (UCSRA & (1<<RXC)){ 
 c46:	5f 99       	sbic	0x0b, 7	; 11
 c48:	fd cf       	rjmp	.-6      	; 0xc44 <serial_Erase_all+0x4>
 c4a:	08 95       	ret

00000c4c <serial_send>:
		UCSRC=(1<<UCSZ1)|(1<<UCSZ0)|(1<<URSEL);
		UBRRL=71;                                  ///9600   baudrate at xtal 11.0592Mhz	
}
//This function sends the string and terminates with LF \n
void serial_send(char *p)
{
 c4c:	cf 93       	push	r28
 c4e:	df 93       	push	r29
 c50:	ec 01       	movw	r28, r24
	serial_Erase_all();
 c52:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_Erase_all>
	for (;*p!=0;p++)
 c56:	88 81       	ld	r24, Y
 c58:	88 23       	and	r24, r24
 c5a:	41 f0       	breq	.+16     	; 0xc6c <serial_send+0x20>
 c5c:	fe 01       	movw	r30, r28
 c5e:	31 96       	adiw	r30, 0x01	; 1
	{
		while (!(UCSRA&(1<<UDRE)));
 c60:	5d 9b       	sbis	0x0b, 5	; 11
 c62:	fe cf       	rjmp	.-4      	; 0xc60 <serial_send+0x14>
		UDR=*p;
 c64:	8c b9       	out	0x0c, r24	; 12
}
//This function sends the string and terminates with LF \n
void serial_send(char *p)
{
	serial_Erase_all();
	for (;*p!=0;p++)
 c66:	81 91       	ld	r24, Z+
 c68:	81 11       	cpse	r24, r1
 c6a:	fa cf       	rjmp	.-12     	; 0xc60 <serial_send+0x14>
	{
		while (!(UCSRA&(1<<UDRE)));
		UDR=*p;
	}
	while (!(UCSRA&(1<<UDRE)));
 c6c:	5d 9b       	sbis	0x0b, 5	; 11
 c6e:	fe cf       	rjmp	.-4      	; 0xc6c <serial_send+0x20>
	UDR='\r';
 c70:	8d e0       	ldi	r24, 0x0D	; 13
 c72:	8c b9       	out	0x0c, r24	; 12
}
 c74:	df 91       	pop	r29
 c76:	cf 91       	pop	r28
 c78:	08 95       	ret

00000c7a <serial_send_byte>:

void serial_send_byte(char byte){
 c7a:	cf 93       	push	r28
 c7c:	c8 2f       	mov	r28, r24
	serial_Erase_all();
 c7e:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_Erase_all>
	while (!(UCSRA&(1<<UDRE)));
 c82:	5d 9b       	sbis	0x0b, 5	; 11
 c84:	fe cf       	rjmp	.-4      	; 0xc82 <serial_send_byte+0x8>
	UDR=byte;
 c86:	cc b9       	out	0x0c, r28	; 12
}
 c88:	cf 91       	pop	r28
 c8a:	08 95       	ret

00000c8c <serial_read_byte>:
	}
}

unsigned char serial_read_byte(void)
{
	while (!(UCSRA&(1<<RXC)));
 c8c:	5f 9b       	sbis	0x0b, 7	; 11
 c8e:	fe cf       	rjmp	.-4      	; 0xc8c <serial_read_byte>
	return UDR;
 c90:	8c b1       	in	r24, 0x0c	; 12
}
 c92:	08 95       	ret

00000c94 <serial_send_nf>:
	i--;
	}
}

void serial_send_nf(char *p)
{
 c94:	cf 93       	push	r28
 c96:	df 93       	push	r29
 c98:	ec 01       	movw	r28, r24
	serial_Erase_all();
 c9a:	0e 94 20 06 	call	0xc40	; 0xc40 <serial_Erase_all>
	for (;*p!=0;p++)
 c9e:	88 81       	ld	r24, Y
 ca0:	88 23       	and	r24, r24
 ca2:	41 f0       	breq	.+16     	; 0xcb4 <serial_send_nf+0x20>
 ca4:	fe 01       	movw	r30, r28
 ca6:	31 96       	adiw	r30, 0x01	; 1
	{
		while (!(UCSRA&(1<<UDRE)));
 ca8:	5d 9b       	sbis	0x0b, 5	; 11
 caa:	fe cf       	rjmp	.-4      	; 0xca8 <serial_send_nf+0x14>
		UDR=*p;
 cac:	8c b9       	out	0x0c, r24	; 12
}

void serial_send_nf(char *p)
{
	serial_Erase_all();
	for (;*p!=0;p++)
 cae:	81 91       	ld	r24, Z+
 cb0:	81 11       	cpse	r24, r1
 cb2:	fa cf       	rjmp	.-12     	; 0xca8 <serial_send_nf+0x14>
	{
		while (!(UCSRA&(1<<UDRE)));
		UDR=*p;
	}
	while (!(UCSRA&(1<<UDRE)));
 cb4:	5d 9b       	sbis	0x0b, 5	; 11
 cb6:	fe cf       	rjmp	.-4      	; 0xcb4 <serial_send_nf+0x20>
}
 cb8:	df 91       	pop	r29
 cba:	cf 91       	pop	r28
 cbc:	08 95       	ret

00000cbe <malloc>:
 cbe:	cf 93       	push	r28
 cc0:	df 93       	push	r29
 cc2:	82 30       	cpi	r24, 0x02	; 2
 cc4:	91 05       	cpc	r25, r1
 cc6:	10 f4       	brcc	.+4      	; 0xccc <malloc+0xe>
 cc8:	82 e0       	ldi	r24, 0x02	; 2
 cca:	90 e0       	ldi	r25, 0x00	; 0
 ccc:	e0 91 40 02 	lds	r30, 0x0240
 cd0:	f0 91 41 02 	lds	r31, 0x0241
 cd4:	20 e0       	ldi	r18, 0x00	; 0
 cd6:	30 e0       	ldi	r19, 0x00	; 0
 cd8:	a0 e0       	ldi	r26, 0x00	; 0
 cda:	b0 e0       	ldi	r27, 0x00	; 0
 cdc:	30 97       	sbiw	r30, 0x00	; 0
 cde:	39 f1       	breq	.+78     	; 0xd2e <malloc+0x70>
 ce0:	40 81       	ld	r20, Z
 ce2:	51 81       	ldd	r21, Z+1	; 0x01
 ce4:	48 17       	cp	r20, r24
 ce6:	59 07       	cpc	r21, r25
 ce8:	b8 f0       	brcs	.+46     	; 0xd18 <malloc+0x5a>
 cea:	48 17       	cp	r20, r24
 cec:	59 07       	cpc	r21, r25
 cee:	71 f4       	brne	.+28     	; 0xd0c <malloc+0x4e>
 cf0:	82 81       	ldd	r24, Z+2	; 0x02
 cf2:	93 81       	ldd	r25, Z+3	; 0x03
 cf4:	10 97       	sbiw	r26, 0x00	; 0
 cf6:	29 f0       	breq	.+10     	; 0xd02 <malloc+0x44>
 cf8:	13 96       	adiw	r26, 0x03	; 3
 cfa:	9c 93       	st	X, r25
 cfc:	8e 93       	st	-X, r24
 cfe:	12 97       	sbiw	r26, 0x02	; 2
 d00:	2c c0       	rjmp	.+88     	; 0xd5a <malloc+0x9c>
 d02:	90 93 41 02 	sts	0x0241, r25
 d06:	80 93 40 02 	sts	0x0240, r24
 d0a:	27 c0       	rjmp	.+78     	; 0xd5a <malloc+0x9c>
 d0c:	21 15       	cp	r18, r1
 d0e:	31 05       	cpc	r19, r1
 d10:	31 f0       	breq	.+12     	; 0xd1e <malloc+0x60>
 d12:	42 17       	cp	r20, r18
 d14:	53 07       	cpc	r21, r19
 d16:	18 f0       	brcs	.+6      	; 0xd1e <malloc+0x60>
 d18:	a9 01       	movw	r20, r18
 d1a:	db 01       	movw	r26, r22
 d1c:	01 c0       	rjmp	.+2      	; 0xd20 <malloc+0x62>
 d1e:	ef 01       	movw	r28, r30
 d20:	9a 01       	movw	r18, r20
 d22:	bd 01       	movw	r22, r26
 d24:	df 01       	movw	r26, r30
 d26:	02 80       	ldd	r0, Z+2	; 0x02
 d28:	f3 81       	ldd	r31, Z+3	; 0x03
 d2a:	e0 2d       	mov	r30, r0
 d2c:	d7 cf       	rjmp	.-82     	; 0xcdc <malloc+0x1e>
 d2e:	21 15       	cp	r18, r1
 d30:	31 05       	cpc	r19, r1
 d32:	f9 f0       	breq	.+62     	; 0xd72 <malloc+0xb4>
 d34:	28 1b       	sub	r18, r24
 d36:	39 0b       	sbc	r19, r25
 d38:	24 30       	cpi	r18, 0x04	; 4
 d3a:	31 05       	cpc	r19, r1
 d3c:	80 f4       	brcc	.+32     	; 0xd5e <malloc+0xa0>
 d3e:	8a 81       	ldd	r24, Y+2	; 0x02
 d40:	9b 81       	ldd	r25, Y+3	; 0x03
 d42:	61 15       	cp	r22, r1
 d44:	71 05       	cpc	r23, r1
 d46:	21 f0       	breq	.+8      	; 0xd50 <malloc+0x92>
 d48:	fb 01       	movw	r30, r22
 d4a:	93 83       	std	Z+3, r25	; 0x03
 d4c:	82 83       	std	Z+2, r24	; 0x02
 d4e:	04 c0       	rjmp	.+8      	; 0xd58 <malloc+0x9a>
 d50:	90 93 41 02 	sts	0x0241, r25
 d54:	80 93 40 02 	sts	0x0240, r24
 d58:	fe 01       	movw	r30, r28
 d5a:	32 96       	adiw	r30, 0x02	; 2
 d5c:	44 c0       	rjmp	.+136    	; 0xde6 <malloc+0x128>
 d5e:	fe 01       	movw	r30, r28
 d60:	e2 0f       	add	r30, r18
 d62:	f3 1f       	adc	r31, r19
 d64:	81 93       	st	Z+, r24
 d66:	91 93       	st	Z+, r25
 d68:	22 50       	subi	r18, 0x02	; 2
 d6a:	31 09       	sbc	r19, r1
 d6c:	39 83       	std	Y+1, r19	; 0x01
 d6e:	28 83       	st	Y, r18
 d70:	3a c0       	rjmp	.+116    	; 0xde6 <malloc+0x128>
 d72:	20 91 3e 02 	lds	r18, 0x023E
 d76:	30 91 3f 02 	lds	r19, 0x023F
 d7a:	23 2b       	or	r18, r19
 d7c:	41 f4       	brne	.+16     	; 0xd8e <malloc+0xd0>
 d7e:	20 91 62 00 	lds	r18, 0x0062
 d82:	30 91 63 00 	lds	r19, 0x0063
 d86:	30 93 3f 02 	sts	0x023F, r19
 d8a:	20 93 3e 02 	sts	0x023E, r18
 d8e:	20 91 60 00 	lds	r18, 0x0060
 d92:	30 91 61 00 	lds	r19, 0x0061
 d96:	21 15       	cp	r18, r1
 d98:	31 05       	cpc	r19, r1
 d9a:	41 f4       	brne	.+16     	; 0xdac <malloc+0xee>
 d9c:	2d b7       	in	r18, 0x3d	; 61
 d9e:	3e b7       	in	r19, 0x3e	; 62
 da0:	40 91 64 00 	lds	r20, 0x0064
 da4:	50 91 65 00 	lds	r21, 0x0065
 da8:	24 1b       	sub	r18, r20
 daa:	35 0b       	sbc	r19, r21
 dac:	e0 91 3e 02 	lds	r30, 0x023E
 db0:	f0 91 3f 02 	lds	r31, 0x023F
 db4:	e2 17       	cp	r30, r18
 db6:	f3 07       	cpc	r31, r19
 db8:	a0 f4       	brcc	.+40     	; 0xde2 <malloc+0x124>
 dba:	2e 1b       	sub	r18, r30
 dbc:	3f 0b       	sbc	r19, r31
 dbe:	28 17       	cp	r18, r24
 dc0:	39 07       	cpc	r19, r25
 dc2:	78 f0       	brcs	.+30     	; 0xde2 <malloc+0x124>
 dc4:	ac 01       	movw	r20, r24
 dc6:	4e 5f       	subi	r20, 0xFE	; 254
 dc8:	5f 4f       	sbci	r21, 0xFF	; 255
 dca:	24 17       	cp	r18, r20
 dcc:	35 07       	cpc	r19, r21
 dce:	48 f0       	brcs	.+18     	; 0xde2 <malloc+0x124>
 dd0:	4e 0f       	add	r20, r30
 dd2:	5f 1f       	adc	r21, r31
 dd4:	50 93 3f 02 	sts	0x023F, r21
 dd8:	40 93 3e 02 	sts	0x023E, r20
 ddc:	81 93       	st	Z+, r24
 dde:	91 93       	st	Z+, r25
 de0:	02 c0       	rjmp	.+4      	; 0xde6 <malloc+0x128>
 de2:	e0 e0       	ldi	r30, 0x00	; 0
 de4:	f0 e0       	ldi	r31, 0x00	; 0
 de6:	cf 01       	movw	r24, r30
 de8:	df 91       	pop	r29
 dea:	cf 91       	pop	r28
 dec:	08 95       	ret

00000dee <free>:
 dee:	cf 93       	push	r28
 df0:	df 93       	push	r29
 df2:	00 97       	sbiw	r24, 0x00	; 0
 df4:	09 f4       	brne	.+2      	; 0xdf8 <free+0xa>
 df6:	87 c0       	rjmp	.+270    	; 0xf06 <free+0x118>
 df8:	fc 01       	movw	r30, r24
 dfa:	32 97       	sbiw	r30, 0x02	; 2
 dfc:	13 82       	std	Z+3, r1	; 0x03
 dfe:	12 82       	std	Z+2, r1	; 0x02
 e00:	c0 91 40 02 	lds	r28, 0x0240
 e04:	d0 91 41 02 	lds	r29, 0x0241
 e08:	20 97       	sbiw	r28, 0x00	; 0
 e0a:	81 f4       	brne	.+32     	; 0xe2c <free+0x3e>
 e0c:	20 81       	ld	r18, Z
 e0e:	31 81       	ldd	r19, Z+1	; 0x01
 e10:	28 0f       	add	r18, r24
 e12:	39 1f       	adc	r19, r25
 e14:	80 91 3e 02 	lds	r24, 0x023E
 e18:	90 91 3f 02 	lds	r25, 0x023F
 e1c:	82 17       	cp	r24, r18
 e1e:	93 07       	cpc	r25, r19
 e20:	79 f5       	brne	.+94     	; 0xe80 <free+0x92>
 e22:	f0 93 3f 02 	sts	0x023F, r31
 e26:	e0 93 3e 02 	sts	0x023E, r30
 e2a:	6d c0       	rjmp	.+218    	; 0xf06 <free+0x118>
 e2c:	de 01       	movw	r26, r28
 e2e:	20 e0       	ldi	r18, 0x00	; 0
 e30:	30 e0       	ldi	r19, 0x00	; 0
 e32:	ae 17       	cp	r26, r30
 e34:	bf 07       	cpc	r27, r31
 e36:	50 f4       	brcc	.+20     	; 0xe4c <free+0x5e>
 e38:	12 96       	adiw	r26, 0x02	; 2
 e3a:	4d 91       	ld	r20, X+
 e3c:	5c 91       	ld	r21, X
 e3e:	13 97       	sbiw	r26, 0x03	; 3
 e40:	9d 01       	movw	r18, r26
 e42:	41 15       	cp	r20, r1
 e44:	51 05       	cpc	r21, r1
 e46:	09 f1       	breq	.+66     	; 0xe8a <free+0x9c>
 e48:	da 01       	movw	r26, r20
 e4a:	f3 cf       	rjmp	.-26     	; 0xe32 <free+0x44>
 e4c:	b3 83       	std	Z+3, r27	; 0x03
 e4e:	a2 83       	std	Z+2, r26	; 0x02
 e50:	40 81       	ld	r20, Z
 e52:	51 81       	ldd	r21, Z+1	; 0x01
 e54:	84 0f       	add	r24, r20
 e56:	95 1f       	adc	r25, r21
 e58:	8a 17       	cp	r24, r26
 e5a:	9b 07       	cpc	r25, r27
 e5c:	71 f4       	brne	.+28     	; 0xe7a <free+0x8c>
 e5e:	8d 91       	ld	r24, X+
 e60:	9c 91       	ld	r25, X
 e62:	11 97       	sbiw	r26, 0x01	; 1
 e64:	84 0f       	add	r24, r20
 e66:	95 1f       	adc	r25, r21
 e68:	02 96       	adiw	r24, 0x02	; 2
 e6a:	91 83       	std	Z+1, r25	; 0x01
 e6c:	80 83       	st	Z, r24
 e6e:	12 96       	adiw	r26, 0x02	; 2
 e70:	8d 91       	ld	r24, X+
 e72:	9c 91       	ld	r25, X
 e74:	13 97       	sbiw	r26, 0x03	; 3
 e76:	93 83       	std	Z+3, r25	; 0x03
 e78:	82 83       	std	Z+2, r24	; 0x02
 e7a:	21 15       	cp	r18, r1
 e7c:	31 05       	cpc	r19, r1
 e7e:	29 f4       	brne	.+10     	; 0xe8a <free+0x9c>
 e80:	f0 93 41 02 	sts	0x0241, r31
 e84:	e0 93 40 02 	sts	0x0240, r30
 e88:	3e c0       	rjmp	.+124    	; 0xf06 <free+0x118>
 e8a:	d9 01       	movw	r26, r18
 e8c:	13 96       	adiw	r26, 0x03	; 3
 e8e:	fc 93       	st	X, r31
 e90:	ee 93       	st	-X, r30
 e92:	12 97       	sbiw	r26, 0x02	; 2
 e94:	4d 91       	ld	r20, X+
 e96:	5d 91       	ld	r21, X+
 e98:	a4 0f       	add	r26, r20
 e9a:	b5 1f       	adc	r27, r21
 e9c:	ea 17       	cp	r30, r26
 e9e:	fb 07       	cpc	r31, r27
 ea0:	79 f4       	brne	.+30     	; 0xec0 <free+0xd2>
 ea2:	80 81       	ld	r24, Z
 ea4:	91 81       	ldd	r25, Z+1	; 0x01
 ea6:	84 0f       	add	r24, r20
 ea8:	95 1f       	adc	r25, r21
 eaa:	02 96       	adiw	r24, 0x02	; 2
 eac:	d9 01       	movw	r26, r18
 eae:	11 96       	adiw	r26, 0x01	; 1
 eb0:	9c 93       	st	X, r25
 eb2:	8e 93       	st	-X, r24
 eb4:	82 81       	ldd	r24, Z+2	; 0x02
 eb6:	93 81       	ldd	r25, Z+3	; 0x03
 eb8:	13 96       	adiw	r26, 0x03	; 3
 eba:	9c 93       	st	X, r25
 ebc:	8e 93       	st	-X, r24
 ebe:	12 97       	sbiw	r26, 0x02	; 2
 ec0:	e0 e0       	ldi	r30, 0x00	; 0
 ec2:	f0 e0       	ldi	r31, 0x00	; 0
 ec4:	8a 81       	ldd	r24, Y+2	; 0x02
 ec6:	9b 81       	ldd	r25, Y+3	; 0x03
 ec8:	00 97       	sbiw	r24, 0x00	; 0
 eca:	19 f0       	breq	.+6      	; 0xed2 <free+0xe4>
 ecc:	fe 01       	movw	r30, r28
 ece:	ec 01       	movw	r28, r24
 ed0:	f9 cf       	rjmp	.-14     	; 0xec4 <free+0xd6>
 ed2:	ce 01       	movw	r24, r28
 ed4:	02 96       	adiw	r24, 0x02	; 2
 ed6:	28 81       	ld	r18, Y
 ed8:	39 81       	ldd	r19, Y+1	; 0x01
 eda:	82 0f       	add	r24, r18
 edc:	93 1f       	adc	r25, r19
 ede:	20 91 3e 02 	lds	r18, 0x023E
 ee2:	30 91 3f 02 	lds	r19, 0x023F
 ee6:	28 17       	cp	r18, r24
 ee8:	39 07       	cpc	r19, r25
 eea:	69 f4       	brne	.+26     	; 0xf06 <free+0x118>
 eec:	30 97       	sbiw	r30, 0x00	; 0
 eee:	29 f4       	brne	.+10     	; 0xefa <free+0x10c>
 ef0:	10 92 41 02 	sts	0x0241, r1
 ef4:	10 92 40 02 	sts	0x0240, r1
 ef8:	02 c0       	rjmp	.+4      	; 0xefe <free+0x110>
 efa:	13 82       	std	Z+3, r1	; 0x03
 efc:	12 82       	std	Z+2, r1	; 0x02
 efe:	d0 93 3f 02 	sts	0x023F, r29
 f02:	c0 93 3e 02 	sts	0x023E, r28
 f06:	df 91       	pop	r29
 f08:	cf 91       	pop	r28
 f0a:	08 95       	ret

00000f0c <strcmp>:
 f0c:	fb 01       	movw	r30, r22
 f0e:	dc 01       	movw	r26, r24
 f10:	8d 91       	ld	r24, X+
 f12:	01 90       	ld	r0, Z+
 f14:	80 19       	sub	r24, r0
 f16:	01 10       	cpse	r0, r1
 f18:	d9 f3       	breq	.-10     	; 0xf10 <strcmp+0x4>
 f1a:	99 0b       	sbc	r25, r25
 f1c:	08 95       	ret

00000f1e <__eerd_block_m16>:
 f1e:	dc 01       	movw	r26, r24
 f20:	cb 01       	movw	r24, r22

00000f22 <__eerd_blraw_m16>:
 f22:	fc 01       	movw	r30, r24
 f24:	e1 99       	sbic	0x1c, 1	; 28
 f26:	fe cf       	rjmp	.-4      	; 0xf24 <__eerd_blraw_m16+0x2>
 f28:	06 c0       	rjmp	.+12     	; 0xf36 <__eerd_blraw_m16+0x14>
 f2a:	ff bb       	out	0x1f, r31	; 31
 f2c:	ee bb       	out	0x1e, r30	; 30
 f2e:	e0 9a       	sbi	0x1c, 0	; 28
 f30:	31 96       	adiw	r30, 0x01	; 1
 f32:	0d b2       	in	r0, 0x1d	; 29
 f34:	0d 92       	st	X+, r0
 f36:	41 50       	subi	r20, 0x01	; 1
 f38:	50 40       	sbci	r21, 0x00	; 0
 f3a:	b8 f7       	brcc	.-18     	; 0xf2a <__eerd_blraw_m16+0x8>
 f3c:	08 95       	ret

00000f3e <__eeupd_block_m16>:
 f3e:	dc 01       	movw	r26, r24
 f40:	a4 0f       	add	r26, r20
 f42:	b5 1f       	adc	r27, r21
 f44:	41 50       	subi	r20, 0x01	; 1
 f46:	50 40       	sbci	r21, 0x00	; 0
 f48:	48 f0       	brcs	.+18     	; 0xf5c <__eeupd_block_m16+0x1e>
 f4a:	cb 01       	movw	r24, r22
 f4c:	84 0f       	add	r24, r20
 f4e:	95 1f       	adc	r25, r21
 f50:	2e 91       	ld	r18, -X
 f52:	0e 94 b0 07 	call	0xf60	; 0xf60 <__eeupd_r18_m16>
 f56:	41 50       	subi	r20, 0x01	; 1
 f58:	50 40       	sbci	r21, 0x00	; 0
 f5a:	d0 f7       	brcc	.-12     	; 0xf50 <__eeupd_block_m16+0x12>
 f5c:	08 95       	ret

00000f5e <__eeupd_byte_m16>:
 f5e:	26 2f       	mov	r18, r22

00000f60 <__eeupd_r18_m16>:
 f60:	e1 99       	sbic	0x1c, 1	; 28
 f62:	fe cf       	rjmp	.-4      	; 0xf60 <__eeupd_r18_m16>
 f64:	9f bb       	out	0x1f, r25	; 31
 f66:	8e bb       	out	0x1e, r24	; 30
 f68:	e0 9a       	sbi	0x1c, 0	; 28
 f6a:	01 97       	sbiw	r24, 0x01	; 1
 f6c:	0d b2       	in	r0, 0x1d	; 29
 f6e:	02 16       	cp	r0, r18
 f70:	31 f0       	breq	.+12     	; 0xf7e <__eeupd_r18_m16+0x1e>
 f72:	2d bb       	out	0x1d, r18	; 29
 f74:	0f b6       	in	r0, 0x3f	; 63
 f76:	f8 94       	cli
 f78:	e2 9a       	sbi	0x1c, 2	; 28
 f7a:	e1 9a       	sbi	0x1c, 1	; 28
 f7c:	0f be       	out	0x3f, r0	; 63
 f7e:	08 95       	ret

00000f80 <_exit>:
 f80:	f8 94       	cli

00000f82 <__stop_program>:
 f82:	ff cf       	rjmp	.-2      	; 0xf82 <__stop_program>
